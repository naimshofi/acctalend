// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.entryexceltojson_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: EntryExcelToJson Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class EntryExcelToJson implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(filepath != null){
				
					this.setProperty("filepath", filepath.toString());
				
			}
			
			if(filename != null){
				
					this.setProperty("filename", filename.toString());
				
			}
			
			if(json_entry != null){
				
					this.setProperty("json_entry", json_entry.toString());
				
			}
			
			if(json_event != null){
				
					this.setProperty("json_event", json_event.toString());
				
			}
			
			if(json_eventRules != null){
				
					this.setProperty("json_eventRules", json_eventRules.toString());
				
			}
			
			if(json_setting != null){
				
					this.setProperty("json_setting", json_setting.toString());
				
			}
			
		}

public String filepath;
public String getFilepath(){
	return this.filepath;
}
public String filename;
public String getFilename(){
	return this.filename;
}
public String json_entry;
public String getJson_entry(){
	return this.json_entry;
}
public String json_event;
public String getJson_event(){
	return this.json_event;
}
public String json_eventRules;
public String getJson_eventRules(){
	return this.json_eventRules;
}
public String json_setting;
public String getJson_setting(){
	return this.json_setting;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "EntryExcelToJson";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				EntryExcelToJson.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(EntryExcelToJson.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJSONDocOpen_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJSONDocOpen_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocSave_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJSONDocSave_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOpen_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJSONDocOpen_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocSave_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJSONDocSave_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOpen_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJSONDocOpen_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractDelimitedFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocSave_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJSONDocSave_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOpen_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJSONDocOpen_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractDelimitedFields_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocSave_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJSONDocSave_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_1_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_1_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_1_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_2_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_2_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_2_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOpen_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJSONDocSave_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJSONDocOpen_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJSONDocSave_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJSONDocOpen_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJSONDocSave_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJSONDocOpen_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJSONDocSave_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tJSONDocOpen_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJSONDocOpen_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJSONDocOpen_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOpen_1", false);
		start_Hash.put("tJSONDocOpen_1", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOpen_1";

	
		int tos_count_tJSONDocOpen_1 = 0;
		


 



/**
 * [tJSONDocOpen_1 begin ] stop
 */
	
	/**
	 * [tJSONDocOpen_1 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	
	globalMap.remove("tJSONDocOpen_1_CURRENT_NODE");
	globalMap.put("tJSONDocOpen_1_COUNT_ROOT_OBJECTS", 0);
   	try {
		de.jlo.talendcomp.json.JsonDocument tJSONDocOpen_1 = new de.jlo.talendcomp.json.JsonDocument(false); 
		globalMap.put("tJSONDocOpen_1", tJSONDocOpen_1);
		globalMap.put("tJSONDocOpen_1_CURRENT_NODE", tJSONDocOpen_1.getRootNode());
		globalMap.put("tJSONDocOpen_1_CURRENT_PATH", "$");
		globalMap.put("tJSONDocOpen_1_COUNT_ROOT_OBJECTS", tJSONDocOpen_1.getCountRootObjects());	
	} catch (Exception e) {
   		globalMap.put("tJSONDocOpen_1_ERROR_MESSAGE", e.getMessage());
   		throw e;
	}

 


	tos_count_tJSONDocOpen_1++;

/**
 * [tJSONDocOpen_1 main ] stop
 */
	
	/**
	 * [tJSONDocOpen_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 



/**
 * [tJSONDocOpen_1 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOpen_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 



/**
 * [tJSONDocOpen_1 process_data_end ] stop
 */
	
	/**
	 * [tJSONDocOpen_1 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 

ok_Hash.put("tJSONDocOpen_1", true);
end_Hash.put("tJSONDocOpen_1", System.currentTimeMillis());




/**
 * [tJSONDocOpen_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJSONDocOpen_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFixedFlowInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJSONDocOpen_1 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 



/**
 * [tJSONDocOpen_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJSONDocOpen_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public Integer raceNumber;

				public Integer getRaceNumber () {
					return this.raceNumber;
				}
				
			    public Integer forcedCarModel;

				public Integer getForcedCarModel () {
					return this.forcedCarModel;
				}
				
			    public Integer overrideDriverInfo;

				public Integer getOverrideDriverInfo () {
					return this.overrideDriverInfo;
				}
				
			    public Integer defaultGridPosition;

				public Integer getDefaultGridPosition () {
					return this.defaultGridPosition;
				}
				
			    public Integer ballastKg;

				public Integer getBallastKg () {
					return this.ballastKg;
				}
				
			    public Integer restrictor;

				public Integer getRestrictor () {
					return this.restrictor;
				}
				
			    public Integer overrideCarModelForCustomCar;

				public Integer getOverrideCarModelForCustomCar () {
					return this.overrideCarModelForCustomCar;
				}
				
			    public Integer isServerAdmin;

				public Integer getIsServerAdmin () {
					return this.isServerAdmin;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
						this.raceNumber = readInteger(dis);
					
						this.forcedCarModel = readInteger(dis);
					
						this.overrideDriverInfo = readInteger(dis);
					
						this.defaultGridPosition = readInteger(dis);
					
						this.ballastKg = readInteger(dis);
					
						this.restrictor = readInteger(dis);
					
						this.overrideCarModelForCustomCar = readInteger(dis);
					
						this.isServerAdmin = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.raceNumber,dos);
					
					// Integer
				
						writeInteger(this.forcedCarModel,dos);
					
					// Integer
				
						writeInteger(this.overrideDriverInfo,dos);
					
					// Integer
				
						writeInteger(this.defaultGridPosition,dos);
					
					// Integer
				
						writeInteger(this.ballastKg,dos);
					
					// Integer
				
						writeInteger(this.restrictor,dos);
					
					// Integer
				
						writeInteger(this.overrideCarModelForCustomCar,dos);
					
					// Integer
				
						writeInteger(this.isServerAdmin,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("raceNumber="+String.valueOf(raceNumber));
		sb.append(",forcedCarModel="+String.valueOf(forcedCarModel));
		sb.append(",overrideDriverInfo="+String.valueOf(overrideDriverInfo));
		sb.append(",defaultGridPosition="+String.valueOf(defaultGridPosition));
		sb.append(",ballastKg="+String.valueOf(ballastKg));
		sb.append(",restrictor="+String.valueOf(restrictor));
		sb.append(",overrideCarModelForCustomCar="+String.valueOf(overrideCarModelForCustomCar));
		sb.append(",isServerAdmin="+String.valueOf(isServerAdmin));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String firstName;

				public String getFirstName () {
					return this.firstName;
				}
				
			    public String lastName;

				public String getLastName () {
					return this.lastName;
				}
				
			    public String shortName;

				public String getShortName () {
					return this.shortName;
				}
				
			    public Integer driverCategory;

				public Integer getDriverCategory () {
					return this.driverCategory;
				}
				
			    public String playerID;

				public String getPlayerID () {
					return this.playerID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.firstName = readString(dis);
					
					this.lastName = readString(dis);
					
					this.shortName = readString(dis);
					
						this.driverCategory = readInteger(dis);
					
					this.playerID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.firstName,dos);
					
					// String
				
						writeString(this.lastName,dos);
					
					// String
				
						writeString(this.shortName,dos);
					
					// Integer
				
						writeInteger(this.driverCategory,dos);
					
					// String
				
						writeString(this.playerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("firstName="+firstName);
		sb.append(",lastName="+lastName);
		sb.append(",shortName="+shortName);
		sb.append(",driverCategory="+String.valueOf(driverCategory));
		sb.append(",playerID="+playerID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String firstName;

				public String getFirstName () {
					return this.firstName;
				}
				
			    public String lastName;

				public String getLastName () {
					return this.lastName;
				}
				
			    public String shortName;

				public String getShortName () {
					return this.shortName;
				}
				
			    public Integer driverCategory;

				public Integer getDriverCategory () {
					return this.driverCategory;
				}
				
			    public String playerID;

				public String getPlayerID () {
					return this.playerID;
				}
				
			    public Integer raceNumber;

				public Integer getRaceNumber () {
					return this.raceNumber;
				}
				
			    public Integer forcedCarModel;

				public Integer getForcedCarModel () {
					return this.forcedCarModel;
				}
				
			    public Integer overrideDriverInfo;

				public Integer getOverrideDriverInfo () {
					return this.overrideDriverInfo;
				}
				
			    public Integer defaultGridPosition;

				public Integer getDefaultGridPosition () {
					return this.defaultGridPosition;
				}
				
			    public Integer ballastKg;

				public Integer getBallastKg () {
					return this.ballastKg;
				}
				
			    public Integer restrictor;

				public Integer getRestrictor () {
					return this.restrictor;
				}
				
			    public Integer overrideCarModelForCustomCar;

				public Integer getOverrideCarModelForCustomCar () {
					return this.overrideCarModelForCustomCar;
				}
				
			    public Integer isServerAdmin;

				public Integer getIsServerAdmin () {
					return this.isServerAdmin;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.firstName = readString(dis);
					
					this.lastName = readString(dis);
					
					this.shortName = readString(dis);
					
						this.driverCategory = readInteger(dis);
					
					this.playerID = readString(dis);
					
						this.raceNumber = readInteger(dis);
					
						this.forcedCarModel = readInteger(dis);
					
						this.overrideDriverInfo = readInteger(dis);
					
						this.defaultGridPosition = readInteger(dis);
					
						this.ballastKg = readInteger(dis);
					
						this.restrictor = readInteger(dis);
					
						this.overrideCarModelForCustomCar = readInteger(dis);
					
						this.isServerAdmin = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.firstName,dos);
					
					// String
				
						writeString(this.lastName,dos);
					
					// String
				
						writeString(this.shortName,dos);
					
					// Integer
				
						writeInteger(this.driverCategory,dos);
					
					// String
				
						writeString(this.playerID,dos);
					
					// Integer
				
						writeInteger(this.raceNumber,dos);
					
					// Integer
				
						writeInteger(this.forcedCarModel,dos);
					
					// Integer
				
						writeInteger(this.overrideDriverInfo,dos);
					
					// Integer
				
						writeInteger(this.defaultGridPosition,dos);
					
					// Integer
				
						writeInteger(this.ballastKg,dos);
					
					// Integer
				
						writeInteger(this.restrictor,dos);
					
					// Integer
				
						writeInteger(this.overrideCarModelForCustomCar,dos);
					
					// Integer
				
						writeInteger(this.isServerAdmin,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("firstName="+firstName);
		sb.append(",lastName="+lastName);
		sb.append(",shortName="+shortName);
		sb.append(",driverCategory="+String.valueOf(driverCategory));
		sb.append(",playerID="+playerID);
		sb.append(",raceNumber="+String.valueOf(raceNumber));
		sb.append(",forcedCarModel="+String.valueOf(forcedCarModel));
		sb.append(",overrideDriverInfo="+String.valueOf(overrideDriverInfo));
		sb.append(",defaultGridPosition="+String.valueOf(defaultGridPosition));
		sb.append(",ballastKg="+String.valueOf(ballastKg));
		sb.append(",restrictor="+String.valueOf(restrictor));
		sb.append(",overrideCarModelForCustomCar="+String.valueOf(overrideCarModelForCustomCar));
		sb.append(",isServerAdmin="+String.valueOf(isServerAdmin));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public Integer forceEntryList;

				public Integer getForceEntryList () {
					return this.forceEntryList;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
						this.forceEntryList = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.forceEntryList,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("forceEntryList="+String.valueOf(forceEntryList));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();




	
	/**
	 * [tJSONDocOutput_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputExcel_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tJSONDocOutput_1", false);
		start_Hash.put("tJSONDocOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJSONDocOutput_1 = 0;
		
	globalMap.remove("tJSONDocOutput_1_CURRENT_NODE");
	globalMap.remove("tJSONDocOutput_1_CURRENT_PATH");
	globalMap.put("tJSONDocOutput_1_NB_LINE", 0);
	java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_1 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
	globalMap.put("keyMap_tJSONDocOutput_1", keyMap_tJSONDocOutput_1);
	de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_1 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_1");
	if (tJSONDocOutput_1 != null && globalMap.get("tJSONDocOpen_1_CURRENT_NODE") != null && globalMap.get("entryNode_tJSONDocOutput_1") == null && false == false) {
		try {
			globalMap.put("tJSONDocOutput_1", tJSONDocOutput_1);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_1_ERROR_MESSAGE", e.getMessage());
			throw e;
		} 
	}
 



/**
 * [tJSONDocOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row1.forceEntryList = 1;
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJSONDocOutput_1 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					
   // the entryNode is the node which receives our current values (new object(s), or array(s))
	com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_1_CURRENT_NODE");
	if (entryNode_tJSONDocOutput_1 != null) {
		String jsonPath = "$";
		// build path to enhance the error messages
		String path = null;
		if (jsonPath != null && jsonPath.isEmpty() == false) {
			if (jsonPath.startsWith("$")) {
				path = jsonPath;
			} else if (".".equals(jsonPath)) {
				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
			} else {
				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH") + "." + jsonPath;
			}
		} else {
			path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
		}
		/* we have to initialize the current node (which we want to create):
		 * if there is no parent node
		 * if there is a different entry node then in previous flow record
		 * if there is a different path then in previous flow record
		 */
		if (globalMap.get("entryNode_tJSONDocOutput_1") == null 
			|| (path.equals(globalMap.get("tJSONDocOutput_1_CURRENT_PATH")) == false)
			|| (globalMap.get("entryNode_tJSONDocOutput_1") != entryNode_tJSONDocOutput_1)) {
			try {
				tJSONDocOutput_1 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_1");
				globalMap.put("tJSONDocOutput_1", tJSONDocOutput_1);
				// get the parent object we have to dock on
				globalMap.put("entryNode_tJSONDocOutput_1", entryNode_tJSONDocOutput_1);
	   		globalMap.put("tJSONDocOutput_1_CURRENT_PATH", path);
	   		tJSONDocOutput_1.setCurrentPath(path);
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_1.getNode(entryNode_tJSONDocOutput_1, jsonPath, true);
			com.fasterxml.jackson.databind.node.ObjectNode parentNode_tJSONDocOutput_1 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				parentNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
			} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is already an ArrayNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
			globalMap.put("parent_node_tJSONDocOutput_1", parentNode_tJSONDocOutput_1);
			globalMap.put("tJSONDocOutput_1_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_1_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
   }	
	try { // start block for tJSONDocOutput_1
		// get the parent node
		com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("parent_node_tJSONDocOutput_1");
		com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_1 = null;
		if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
			currentNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
		} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
			throw new Exception(globalMap.get("tJSONDocOutput_1_CURRENT_PATH") + ": Actually as parent an ObjectNode is expected, but there is already an ArrayNode: " + node + ". Check the configuration.");
		} else {
			throw new Exception(globalMap.get("tJSONDocOutput_1_CURRENT_PATH") + ": Actually as parent an ObjectNode is expected, but there is anything else (or null): " + node + ". Check the configuration.");
		}
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "forceEntryList";
			}
			tJSONDocOutput_1.setValue(currentNode_tJSONDocOutput_1, fieldName, row1.forceEntryList, false);
		}
		globalMap.put("tJSONDocOutput_1.forceEntryList", row1.forceEntryList);
		globalMap.put("tJSONDocOutput_1_CURRENT_NODE", currentNode_tJSONDocOutput_1);
		Integer counter_tJSONDocOutput_1 = (Integer) globalMap.get("tJSONDocOutput_1_NB_LINE");
		globalMap.put("tJSONDocOutput_1_NB_LINE", counter_tJSONDocOutput_1.intValue() + 1);
	} catch (Exception e) {
		globalMap.put("tJSONDocOutput_1_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	} else {
		throw new Exception("The referenced current document from component: tJSONDocOpen_1 is null. Please check the job structur!");
	} 
 


	tos_count_tJSONDocOutput_1++;

/**
 * [tJSONDocOutput_1 main ] stop
 */
	
	/**
	 * [tJSONDocOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	

 



/**
 * [tJSONDocOutput_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputExcel_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out2", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputExcel_1);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tJSONDocOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOutput_2", false);
		start_Hash.put("tJSONDocOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tJSONDocOutput_2 = 0;
		
	globalMap.remove("tJSONDocOutput_2_CURRENT_NODE");
	globalMap.remove("tJSONDocOutput_2_CURRENT_PATH");
	globalMap.put("tJSONDocOutput_2_NB_LINE", 0);
	java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_2 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
	globalMap.put("keyMap_tJSONDocOutput_2", keyMap_tJSONDocOutput_2);
	de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_2 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOutput_1");
	if (tJSONDocOutput_2 != null && globalMap.get("tJSONDocOutput_1_CURRENT_NODE") != null && globalMap.get("entryNode_tJSONDocOutput_2") == null && false == false) {
		try {
			globalMap.put("tJSONDocOutput_2", tJSONDocOutput_2);
			String jsonPath = "$.entries";
	   	// build path to enhance the error messages
	   	String path = null;
	   	if (jsonPath != null && jsonPath.isEmpty() == false) {
	   		if (jsonPath.startsWith("$")) {
	   			path = jsonPath;
	   		} else if (".".equals(jsonPath)) {
	   			path = (String) globalMap.get("tJSONDocOutput_1_CURRENT_PATH");
	   		} else {
	   			path = (String) globalMap.get("tJSONDocOutput_1_CURRENT_PATH") + "." + jsonPath;
	   		}
	   	} else {
   			path = (String) globalMap.get("tJSONDocOutput_1_CURRENT_PATH");
	   	}
	   	globalMap.put("tJSONDocOutput_2_CURRENT_PATH", path);
	   	tJSONDocOutput_2.setCurrentPath(path);
			// get the parent object we have to dock on
			com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_2 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_1_CURRENT_NODE");
			globalMap.put("entryNode_tJSONDocOutput_2", entryNode_tJSONDocOutput_2);
			// take care the path will be created as array
			if (".".equals(jsonPath) == false) {
				if (jsonPath == null) {
					jsonPath = "[" + Integer.MAX_VALUE + "]";
				} else if (jsonPath.endsWith("]") == false) {
					jsonPath = jsonPath + "[" + Integer.MAX_VALUE + "]"; // take care we never hit an existing array element
					// this way we get the array itself as result of getNode(...)
				}
			}
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_2.getNode(entryNode_tJSONDocOutput_2, jsonPath, true);
			com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_2 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				parentNode_tJSONDocOutput_2 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
				globalMap.put("parent_node_tJSONDocOutput_2", parentNode_tJSONDocOutput_2);
			} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				throw new Exception(path + ": Actually an ArrayNode is expected, but there is already an ObjectNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": Actually an ArrayNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_2_ERROR_MESSAGE", e.getMessage());
			throw e;
		} 
	}
 



/**
 * [tJSONDocOutput_2 begin ] stop
 */




	
	/**
	 * [tJSONDocOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOutput_3", false);
		start_Hash.put("tJSONDocOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tJSONDocOutput_3 = 0;
		
	globalMap.remove("tJSONDocOutput_3_CURRENT_NODE");
	globalMap.remove("tJSONDocOutput_3_CURRENT_PATH");
	globalMap.put("tJSONDocOutput_3_NB_LINE", 0);
	java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_3 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
	globalMap.put("keyMap_tJSONDocOutput_3", keyMap_tJSONDocOutput_3);
	de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_3 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOutput_2");
	if (tJSONDocOutput_3 != null && globalMap.get("tJSONDocOutput_2_CURRENT_NODE") != null && globalMap.get("entryNode_tJSONDocOutput_3") == null && false == false) {
		try {
			globalMap.put("tJSONDocOutput_3", tJSONDocOutput_3);
			String jsonPath = "$.drivers";
	   	// build path to enhance the error messages
	   	String path = null;
	   	if (jsonPath != null && jsonPath.isEmpty() == false) {
	   		if (jsonPath.startsWith("$")) {
	   			path = jsonPath;
	   		} else if (".".equals(jsonPath)) {
	   			path = (String) globalMap.get("tJSONDocOutput_2_CURRENT_PATH");
	   		} else {
	   			path = (String) globalMap.get("tJSONDocOutput_2_CURRENT_PATH") + "." + jsonPath;
	   		}
	   	} else {
   			path = (String) globalMap.get("tJSONDocOutput_2_CURRENT_PATH");
	   	}
	   	globalMap.put("tJSONDocOutput_3_CURRENT_PATH", path);
	   	tJSONDocOutput_3.setCurrentPath(path);
			// get the parent object we have to dock on
			com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_3 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_2_CURRENT_NODE");
			globalMap.put("entryNode_tJSONDocOutput_3", entryNode_tJSONDocOutput_3);
			// take care the path will be created as array
			if (".".equals(jsonPath) == false) {
				if (jsonPath == null) {
					jsonPath = "[" + Integer.MAX_VALUE + "]";
				} else if (jsonPath.endsWith("]") == false) {
					jsonPath = jsonPath + "[" + Integer.MAX_VALUE + "]"; // take care we never hit an existing array element
					// this way we get the array itself as result of getNode(...)
				}
			}
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_3.getNode(entryNode_tJSONDocOutput_3, jsonPath, true);
			com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_3 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				parentNode_tJSONDocOutput_3 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
				globalMap.put("parent_node_tJSONDocOutput_3", parentNode_tJSONDocOutput_3);
			} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				throw new Exception(path + ": Actually an ArrayNode is expected, but there is already an ObjectNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": Actually an ArrayNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_3_ERROR_MESSAGE", e.getMessage());
			throw e;
		} 
	}
 



/**
 * [tJSONDocOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:bl/+njhVK/jtdofv7A1nNkxtZb4Np7UfUfj/0g==");
        String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
        if (password_tFileInputExcel_1.isEmpty()){
            password_tFileInputExcel_1 = null;
        }
			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = context.filepath + context.filename;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_1), password_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_1, password_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, context.json_entry, false));
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 1;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row3 = null;
					int tempRowLength_tFileInputExcel_1 = 13;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row3 = new row3Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "firstName";

				row3.firstName = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.firstName = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "lastName";

				row3.lastName = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.lastName = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "shortName";

				row3.shortName = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.shortName = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "driverCategory";

				row3.driverCategory = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.driverCategory = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "playerID";

				row3.playerID = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.playerID = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "raceNumber";

				row3.raceNumber = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.raceNumber = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "forcedCarModel";

				row3.forcedCarModel = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.forcedCarModel = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "overrideDriverInfo";

				row3.overrideDriverInfo = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.overrideDriverInfo = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "defaultGridPosition";

				row3.defaultGridPosition = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.defaultGridPosition = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "ballastKg";

				row3.ballastKg = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.ballastKg = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 10;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "restrictor";

				row3.restrictor = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.restrictor = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 11;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "overrideCarModelForCustomCar";

				row3.overrideCarModelForCustomCar = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.overrideCarModelForCustomCar = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 12;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "isServerAdmin";

				row3.isServerAdmin = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.isServerAdmin = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
	            throw(e);
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;
out2 = null;


// # Output table : 'out1'
out1_tmp.raceNumber = row3.raceNumber;
out1_tmp.forcedCarModel = row3.forcedCarModel;
out1_tmp.overrideDriverInfo = row3.overrideDriverInfo;
out1_tmp.defaultGridPosition = row3.defaultGridPosition;
out1_tmp.ballastKg = row3.ballastKg;
out1_tmp.restrictor = row3.restrictor;
out1_tmp.overrideCarModelForCustomCar = row3.overrideCarModelForCustomCar;
out1_tmp.isServerAdmin = row3.isServerAdmin;
out1 = out1_tmp;

// # Output table : 'out2'
out2_tmp.firstName = row3.firstName;
out2_tmp.lastName = row3.lastName;
out2_tmp.shortName = row3.shortName;
out2_tmp.driverCategory = row3.driverCategory;
out2_tmp.playerID = row3.playerID;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tJSONDocOutput_2 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					
   // the entryNode is the node which receives our current values (new object(s), or array(s))
	com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_2 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_1_CURRENT_NODE");
	if (entryNode_tJSONDocOutput_2 != null) {
		String jsonPath = "$.entries";
		// build path to enhance the error messages
		String path = null;
		if (jsonPath != null && jsonPath.isEmpty() == false) {
			if (jsonPath.startsWith("$")) {
				path = jsonPath;
			} else if (".".equals(jsonPath)) {
				path = (String) globalMap.get("tJSONDocOutput_1_CURRENT_PATH");
			} else {
				path = (String) globalMap.get("tJSONDocOutput_1_CURRENT_PATH") + "." + jsonPath;
			}
		} else {
			path = (String) globalMap.get("tJSONDocOutput_1_CURRENT_PATH");
		}
		/* we have to initialize the current node (which we want to create):
		 * if there is no parent node
		 * if there is a different entry node then in previous flow record
		 * if there is a different path then in previous flow record
		 */
		if (globalMap.get("entryNode_tJSONDocOutput_2") == null 
			|| (path.equals(globalMap.get("tJSONDocOutput_2_CURRENT_PATH")) == false)
			|| (globalMap.get("entryNode_tJSONDocOutput_2") != entryNode_tJSONDocOutput_2)) {
			try {
				tJSONDocOutput_2 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOutput_1");
				globalMap.put("tJSONDocOutput_2", tJSONDocOutput_2);
				// get the parent object we have to dock on
				globalMap.put("entryNode_tJSONDocOutput_2", entryNode_tJSONDocOutput_2);
	   		globalMap.put("tJSONDocOutput_2_CURRENT_PATH", path);
	   		tJSONDocOutput_2.setCurrentPath(path);
			// take care the path will be created as array
			if (".".equals(jsonPath) == false) {
				if (jsonPath == null) {
					jsonPath = "[" + Integer.MAX_VALUE + "]";
				} else if (jsonPath.endsWith("]") == false) {
					jsonPath = jsonPath + "[" + Integer.MAX_VALUE + "]"; // take care we never hit an existing array element
					// this way we get the array itself as result of getNode(...)
				}
			}
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_2.getNode(entryNode_tJSONDocOutput_2, jsonPath, true);
			com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_2 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				parentNode_tJSONDocOutput_2 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
			} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				throw new Exception(path + ": ArrayNode is expected, but there is already an ObjectNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": ArrayNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
			globalMap.put("parent_node_tJSONDocOutput_2", parentNode_tJSONDocOutput_2);
			globalMap.put("tJSONDocOutput_2_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_2_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
   }	
	try { // start block for tJSONDocOutput_2
		// get the parent node
		com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("parent_node_tJSONDocOutput_2");
		com.fasterxml.jackson.databind.node.ArrayNode parentNode = null;
		if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
			parentNode = (com.fasterxml.jackson.databind.node.ArrayNode) node;
		} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
			throw new Exception(globalMap.get("tJSONDocOutput_2_CURRENT_PATH") + ": Actually as parent an ArrayNode is expected, but there is already an ObjectNode: " + node + ". Check the configuration.");
		} else {
			throw new Exception(globalMap.get("tJSONDocOutput_2_CURRENT_PATH") + ": Actually as parent an ArrayNode is expected, but there is anything else (or null): " + node + ". Check the configuration.");
		}
		com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_2 = parentNode.addObject();
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "raceNumber";
			}
			tJSONDocOutput_2.setValue(currentNode_tJSONDocOutput_2, fieldName, out1.raceNumber, false);
		}
		globalMap.put("tJSONDocOutput_2.raceNumber", out1.raceNumber);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "forcedCarModel";
			}
			tJSONDocOutput_2.setValue(currentNode_tJSONDocOutput_2, fieldName, out1.forcedCarModel, false);
		}
		globalMap.put("tJSONDocOutput_2.forcedCarModel", out1.forcedCarModel);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "overrideDriverInfo";
			}
			tJSONDocOutput_2.setValue(currentNode_tJSONDocOutput_2, fieldName, out1.overrideDriverInfo, false);
		}
		globalMap.put("tJSONDocOutput_2.overrideDriverInfo", out1.overrideDriverInfo);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "defaultGridPosition";
			}
			tJSONDocOutput_2.setValue(currentNode_tJSONDocOutput_2, fieldName, out1.defaultGridPosition, false);
		}
		globalMap.put("tJSONDocOutput_2.defaultGridPosition", out1.defaultGridPosition);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "ballastKg";
			}
			tJSONDocOutput_2.setValue(currentNode_tJSONDocOutput_2, fieldName, out1.ballastKg, false);
		}
		globalMap.put("tJSONDocOutput_2.ballastKg", out1.ballastKg);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "restrictor";
			}
			tJSONDocOutput_2.setValue(currentNode_tJSONDocOutput_2, fieldName, out1.restrictor, false);
		}
		globalMap.put("tJSONDocOutput_2.restrictor", out1.restrictor);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "overrideCarModelForCustomCar";
			}
			tJSONDocOutput_2.setValue(currentNode_tJSONDocOutput_2, fieldName, out1.overrideCarModelForCustomCar, false);
		}
		globalMap.put("tJSONDocOutput_2.overrideCarModelForCustomCar", out1.overrideCarModelForCustomCar);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "isServerAdmin";
			}
			tJSONDocOutput_2.setValue(currentNode_tJSONDocOutput_2, fieldName, out1.isServerAdmin, false);
		}
		globalMap.put("tJSONDocOutput_2.isServerAdmin", out1.isServerAdmin);
		globalMap.put("tJSONDocOutput_2_CURRENT_NODE", currentNode_tJSONDocOutput_2);
		Integer counter_tJSONDocOutput_2 = (Integer) globalMap.get("tJSONDocOutput_2_NB_LINE");
		globalMap.put("tJSONDocOutput_2_NB_LINE", counter_tJSONDocOutput_2.intValue() + 1);
	} catch (Exception e) {
		globalMap.put("tJSONDocOutput_2_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	} else {
		throw new Exception("The referenced current document from component: tJSONDocOutput_1 is null. Please check the job structur!");
	} 
 


	tos_count_tJSONDocOutput_2++;

/**
 * [tJSONDocOutput_2 main ] stop
 */
	
	/**
	 * [tJSONDocOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_2";

	

 



/**
 * [tJSONDocOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_2";

	

 



/**
 * [tJSONDocOutput_2 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tJSONDocOutput_3 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					
   // the entryNode is the node which receives our current values (new object(s), or array(s))
	com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_3 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_2_CURRENT_NODE");
	if (entryNode_tJSONDocOutput_3 != null) {
		String jsonPath = "$.drivers";
		// build path to enhance the error messages
		String path = null;
		if (jsonPath != null && jsonPath.isEmpty() == false) {
			if (jsonPath.startsWith("$")) {
				path = jsonPath;
			} else if (".".equals(jsonPath)) {
				path = (String) globalMap.get("tJSONDocOutput_2_CURRENT_PATH");
			} else {
				path = (String) globalMap.get("tJSONDocOutput_2_CURRENT_PATH") + "." + jsonPath;
			}
		} else {
			path = (String) globalMap.get("tJSONDocOutput_2_CURRENT_PATH");
		}
		/* we have to initialize the current node (which we want to create):
		 * if there is no parent node
		 * if there is a different entry node then in previous flow record
		 * if there is a different path then in previous flow record
		 */
		if (globalMap.get("entryNode_tJSONDocOutput_3") == null 
			|| (path.equals(globalMap.get("tJSONDocOutput_3_CURRENT_PATH")) == false)
			|| (globalMap.get("entryNode_tJSONDocOutput_3") != entryNode_tJSONDocOutput_3)) {
			try {
				tJSONDocOutput_3 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOutput_2");
				globalMap.put("tJSONDocOutput_3", tJSONDocOutput_3);
				// get the parent object we have to dock on
				globalMap.put("entryNode_tJSONDocOutput_3", entryNode_tJSONDocOutput_3);
	   		globalMap.put("tJSONDocOutput_3_CURRENT_PATH", path);
	   		tJSONDocOutput_3.setCurrentPath(path);
			// take care the path will be created as array
			if (".".equals(jsonPath) == false) {
				if (jsonPath == null) {
					jsonPath = "[" + Integer.MAX_VALUE + "]";
				} else if (jsonPath.endsWith("]") == false) {
					jsonPath = jsonPath + "[" + Integer.MAX_VALUE + "]"; // take care we never hit an existing array element
					// this way we get the array itself as result of getNode(...)
				}
			}
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_3.getNode(entryNode_tJSONDocOutput_3, jsonPath, true);
			com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_3 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				parentNode_tJSONDocOutput_3 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
			} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				throw new Exception(path + ": ArrayNode is expected, but there is already an ObjectNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": ArrayNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
			globalMap.put("parent_node_tJSONDocOutput_3", parentNode_tJSONDocOutput_3);
			globalMap.put("tJSONDocOutput_3_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_3_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
   }	
	try { // start block for tJSONDocOutput_3
		// get the parent node
		com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("parent_node_tJSONDocOutput_3");
		com.fasterxml.jackson.databind.node.ArrayNode parentNode = null;
		if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
			parentNode = (com.fasterxml.jackson.databind.node.ArrayNode) node;
		} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
			throw new Exception(globalMap.get("tJSONDocOutput_3_CURRENT_PATH") + ": Actually as parent an ArrayNode is expected, but there is already an ObjectNode: " + node + ". Check the configuration.");
		} else {
			throw new Exception(globalMap.get("tJSONDocOutput_3_CURRENT_PATH") + ": Actually as parent an ArrayNode is expected, but there is anything else (or null): " + node + ". Check the configuration.");
		}
		com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_3 = parentNode.addObject();
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "firstName";
			}
			tJSONDocOutput_3.setValue(currentNode_tJSONDocOutput_3, fieldName, out2.firstName, false);
		}
		globalMap.put("tJSONDocOutput_3.firstName", out2.firstName);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "lastName";
			}
			tJSONDocOutput_3.setValue(currentNode_tJSONDocOutput_3, fieldName, out2.lastName, false);
		}
		globalMap.put("tJSONDocOutput_3.lastName", out2.lastName);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "shortName";
			}
			tJSONDocOutput_3.setValue(currentNode_tJSONDocOutput_3, fieldName, out2.shortName, false);
		}
		globalMap.put("tJSONDocOutput_3.shortName", out2.shortName);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "driverCategory";
			}
			tJSONDocOutput_3.setValue(currentNode_tJSONDocOutput_3, fieldName, out2.driverCategory, false);
		}
		globalMap.put("tJSONDocOutput_3.driverCategory", out2.driverCategory);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "playerID";
			}
			tJSONDocOutput_3.setValue(currentNode_tJSONDocOutput_3, fieldName, out2.playerID, false);
		}
		globalMap.put("tJSONDocOutput_3.playerID", out2.playerID);
		globalMap.put("tJSONDocOutput_3_CURRENT_NODE", currentNode_tJSONDocOutput_3);
		Integer counter_tJSONDocOutput_3 = (Integer) globalMap.get("tJSONDocOutput_3_NB_LINE");
		globalMap.put("tJSONDocOutput_3_NB_LINE", counter_tJSONDocOutput_3.intValue() + 1);
	} catch (Exception e) {
		globalMap.put("tJSONDocOutput_3_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	} else {
		throw new Exception("The referenced current document from component: tJSONDocOutput_2 is null. Please check the job structur!");
	} 
 


	tos_count_tJSONDocOutput_3++;

/**
 * [tJSONDocOutput_3 main ] stop
 */
	
	/**
	 * [tJSONDocOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_3";

	

 



/**
 * [tJSONDocOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_3";

	

 



/**
 * [tJSONDocOutput_3 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJSONDocOutput_2 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_2";

	
	globalMap.remove("entryNode_tJSONDocOutput_2");
    globalMap.put("tJSONDocOutput_2_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util.buildSQLInClause(keyMap_tJSONDocOutput_2.keySet(), "='0'"));
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tJSONDocOutput_2", true);
end_Hash.put("tJSONDocOutput_2", System.currentTimeMillis());




/**
 * [tJSONDocOutput_2 end ] stop
 */




	
	/**
	 * [tJSONDocOutput_3 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_3";

	
	globalMap.remove("entryNode_tJSONDocOutput_3");
    globalMap.put("tJSONDocOutput_3_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util.buildSQLInClause(keyMap_tJSONDocOutput_3.keySet(), "='0'"));
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tJSONDocOutput_3", true);
end_Hash.put("tJSONDocOutput_3", System.currentTimeMillis());




/**
 * [tJSONDocOutput_3 end ] stop
 */






						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputExcel_1);
						}				
					




	
	/**
	 * [tJSONDocOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	

 



/**
 * [tJSONDocOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tJSONDocOutput_1 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	
	globalMap.remove("entryNode_tJSONDocOutput_1");
    globalMap.put("tJSONDocOutput_1_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util.buildSQLInClause(keyMap_tJSONDocOutput_1.keySet(), "='0'"));
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJSONDocOutput_1", true);
end_Hash.put("tJSONDocOutput_1", System.currentTimeMillis());




/**
 * [tJSONDocOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJSONDocSave_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tJSONDocOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	

 



/**
 * [tJSONDocOutput_1 finally ] stop
 */

	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJSONDocOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_2";

	

 



/**
 * [tJSONDocOutput_2 finally ] stop
 */




	
	/**
	 * [tJSONDocOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_3";

	

 



/**
 * [tJSONDocOutput_3 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJSONDocSave_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJSONDocSave_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJSONDocSave_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocSave_1", false);
		start_Hash.put("tJSONDocSave_1", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocSave_1";

	
		int tos_count_tJSONDocSave_1 = 0;
		
	de.jlo.talendcomp.json.JsonDocument tJSONDocSave_1 = new de.jlo.talendcomp.json.JsonDocument((com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_1_CURRENT_NODE"));
	globalMap.put("tJSONDocSave_1", tJSONDocSave_1);	
	com.fasterxml.jackson.databind.JsonNode tJSONDocSave_1_outputNode = null;
	try {
		tJSONDocSave_1_outputNode = tJSONDocSave_1.getConditionalUnwrappedRootNode((false), true);
		globalMap.put("tJSONDocSave_1_CURRENT_NODE", tJSONDocSave_1_outputNode);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_1_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	String filePath_tJSONDocSave_1 = context.filepath + context.json_entry + ".json";
	try {
		tJSONDocSave_1.writeToFile(filePath_tJSONDocSave_1, true, false);
		globalMap.put("tJSONDocSave_1_OUTPUT_FILE_PATH", filePath_tJSONDocSave_1);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_1_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	Object jsonOutput_tJSONDocSave_1 = null;
	try {
		jsonOutput_tJSONDocSave_1 = tJSONDocSave_1.getJsonString(tJSONDocSave_1_outputNode, true, false);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_1_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	globalMap.put("tJSONDocSave_1_JSON_STRING", (String) jsonOutput_tJSONDocSave_1);
	
 



/**
 * [tJSONDocSave_1 begin ] stop
 */
	
	/**
	 * [tJSONDocSave_1 main ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_1";

	

 


	tos_count_tJSONDocSave_1++;

/**
 * [tJSONDocSave_1 main ] stop
 */
	
	/**
	 * [tJSONDocSave_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_1";

	

 



/**
 * [tJSONDocSave_1 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocSave_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_1";

	

 



/**
 * [tJSONDocSave_1 process_data_end ] stop
 */
	
	/**
	 * [tJSONDocSave_1 end ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_1";

	

		 
	
 

ok_Hash.put("tJSONDocSave_1", true);
end_Hash.put("tJSONDocSave_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJSONDocOpen_2Process(globalMap);



/**
 * [tJSONDocSave_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJSONDocSave_1 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_1";

	

 



/**
 * [tJSONDocSave_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJSONDocSave_1_SUBPROCESS_STATE", 1);
	}
	

public void tJSONDocOpen_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJSONDocOpen_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJSONDocOpen_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOpen_2", false);
		start_Hash.put("tJSONDocOpen_2", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOpen_2";

	
		int tos_count_tJSONDocOpen_2 = 0;
		


 



/**
 * [tJSONDocOpen_2 begin ] stop
 */
	
	/**
	 * [tJSONDocOpen_2 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	
	globalMap.remove("tJSONDocOpen_2_CURRENT_NODE");
	globalMap.put("tJSONDocOpen_2_COUNT_ROOT_OBJECTS", 0);
   	try {
		de.jlo.talendcomp.json.JsonDocument tJSONDocOpen_2 = new de.jlo.talendcomp.json.JsonDocument(false); 
		globalMap.put("tJSONDocOpen_2", tJSONDocOpen_2);
		globalMap.put("tJSONDocOpen_2_CURRENT_NODE", tJSONDocOpen_2.getRootNode());
		globalMap.put("tJSONDocOpen_2_CURRENT_PATH", "$");
		globalMap.put("tJSONDocOpen_2_COUNT_ROOT_OBJECTS", tJSONDocOpen_2.getCountRootObjects());	
	} catch (Exception e) {
   		globalMap.put("tJSONDocOpen_2_ERROR_MESSAGE", e.getMessage());
   		throw e;
	}

 


	tos_count_tJSONDocOpen_2++;

/**
 * [tJSONDocOpen_2 main ] stop
 */
	
	/**
	 * [tJSONDocOpen_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	

 



/**
 * [tJSONDocOpen_2 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOpen_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	

 



/**
 * [tJSONDocOpen_2 process_data_end ] stop
 */
	
	/**
	 * [tJSONDocOpen_2 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	

 

ok_Hash.put("tJSONDocOpen_2", true);
end_Hash.put("tJSONDocOpen_2", System.currentTimeMillis());




/**
 * [tJSONDocOpen_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJSONDocOpen_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileInputExcel_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJSONDocOpen_2 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	

 



/**
 * [tJSONDocOpen_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJSONDocOpen_2_SUBPROCESS_STATE", 1);
	}
	


public static class mainStruct implements routines.system.IPersistableRow<mainStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String track;

				public String getTrack () {
					return this.track;
				}
				
			    public Integer preRaceWaitingTimeSeconds;

				public Integer getPreRaceWaitingTimeSeconds () {
					return this.preRaceWaitingTimeSeconds;
				}
				
			    public Integer sessionOverTimeSeconds;

				public Integer getSessionOverTimeSeconds () {
					return this.sessionOverTimeSeconds;
				}
				
			    public Integer ambientTemp;

				public Integer getAmbientTemp () {
					return this.ambientTemp;
				}
				
			    public Double cloudLevel;

				public Double getCloudLevel () {
					return this.cloudLevel;
				}
				
			    public Double rain;

				public Double getRain () {
					return this.rain;
				}
				
			    public Integer weatherRandomness;

				public Integer getWeatherRandomness () {
					return this.weatherRandomness;
				}
				
			    public Integer postQualySeconds;

				public Integer getPostQualySeconds () {
					return this.postQualySeconds;
				}
				
			    public Integer postRaceSeconds;

				public Integer getPostRaceSeconds () {
					return this.postRaceSeconds;
				}
				
			    public Integer configVersion;

				public Integer getConfigVersion () {
					return this.configVersion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.track = readString(dis);
					
						this.preRaceWaitingTimeSeconds = readInteger(dis);
					
						this.sessionOverTimeSeconds = readInteger(dis);
					
						this.ambientTemp = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cloudLevel = null;
           				} else {
           			    	this.cloudLevel = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.rain = null;
           				} else {
           			    	this.rain = dis.readDouble();
           				}
					
						this.weatherRandomness = readInteger(dis);
					
						this.postQualySeconds = readInteger(dis);
					
						this.postRaceSeconds = readInteger(dis);
					
						this.configVersion = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.track,dos);
					
					// Integer
				
						writeInteger(this.preRaceWaitingTimeSeconds,dos);
					
					// Integer
				
						writeInteger(this.sessionOverTimeSeconds,dos);
					
					// Integer
				
						writeInteger(this.ambientTemp,dos);
					
					// Double
				
						if(this.cloudLevel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cloudLevel);
		            	}
					
					// Double
				
						if(this.rain == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.rain);
		            	}
					
					// Integer
				
						writeInteger(this.weatherRandomness,dos);
					
					// Integer
				
						writeInteger(this.postQualySeconds,dos);
					
					// Integer
				
						writeInteger(this.postRaceSeconds,dos);
					
					// Integer
				
						writeInteger(this.configVersion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("track="+track);
		sb.append(",preRaceWaitingTimeSeconds="+String.valueOf(preRaceWaitingTimeSeconds));
		sb.append(",sessionOverTimeSeconds="+String.valueOf(sessionOverTimeSeconds));
		sb.append(",ambientTemp="+String.valueOf(ambientTemp));
		sb.append(",cloudLevel="+String.valueOf(cloudLevel));
		sb.append(",rain="+String.valueOf(rain));
		sb.append(",weatherRandomness="+String.valueOf(weatherRandomness));
		sb.append(",postQualySeconds="+String.valueOf(postQualySeconds));
		sb.append(",postRaceSeconds="+String.valueOf(postRaceSeconds));
		sb.append(",configVersion="+String.valueOf(configVersion));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mainStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sessionsStruct implements routines.system.IPersistableRow<sessionsStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public Integer hourOfDay;

				public Integer getHourOfDay () {
					return this.hourOfDay;
				}
				
			    public Integer dayOfWeekend;

				public Integer getDayOfWeekend () {
					return this.dayOfWeekend;
				}
				
			    public Integer timeMultiplier;

				public Integer getTimeMultiplier () {
					return this.timeMultiplier;
				}
				
			    public String sessionType;

				public String getSessionType () {
					return this.sessionType;
				}
				
			    public Integer sessionDurationMinutes;

				public Integer getSessionDurationMinutes () {
					return this.sessionDurationMinutes;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
						this.hourOfDay = readInteger(dis);
					
						this.dayOfWeekend = readInteger(dis);
					
						this.timeMultiplier = readInteger(dis);
					
					this.sessionType = readString(dis);
					
						this.sessionDurationMinutes = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.hourOfDay,dos);
					
					// Integer
				
						writeInteger(this.dayOfWeekend,dos);
					
					// Integer
				
						writeInteger(this.timeMultiplier,dos);
					
					// String
				
						writeString(this.sessionType,dos);
					
					// Integer
				
						writeInteger(this.sessionDurationMinutes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("hourOfDay="+String.valueOf(hourOfDay));
		sb.append(",dayOfWeekend="+String.valueOf(dayOfWeekend));
		sb.append(",timeMultiplier="+String.valueOf(timeMultiplier));
		sb.append(",sessionType="+sessionType);
		sb.append(",sessionDurationMinutes="+String.valueOf(sessionDurationMinutes));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sessionsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String track;

				public String getTrack () {
					return this.track;
				}
				
			    public Integer preRaceWaitingTimeSeconds;

				public Integer getPreRaceWaitingTimeSeconds () {
					return this.preRaceWaitingTimeSeconds;
				}
				
			    public Integer sessionOverTimeSeconds;

				public Integer getSessionOverTimeSeconds () {
					return this.sessionOverTimeSeconds;
				}
				
			    public Integer ambientTemp;

				public Integer getAmbientTemp () {
					return this.ambientTemp;
				}
				
			    public Double cloudLevel;

				public Double getCloudLevel () {
					return this.cloudLevel;
				}
				
			    public Double rain;

				public Double getRain () {
					return this.rain;
				}
				
			    public Integer weatherRandomness;

				public Integer getWeatherRandomness () {
					return this.weatherRandomness;
				}
				
			    public Integer postQualySeconds;

				public Integer getPostQualySeconds () {
					return this.postQualySeconds;
				}
				
			    public Integer postRaceSeconds;

				public Integer getPostRaceSeconds () {
					return this.postRaceSeconds;
				}
				
			    public String sessionType;

				public String getSessionType () {
					return this.sessionType;
				}
				
			    public Integer hourOfDay;

				public Integer getHourOfDay () {
					return this.hourOfDay;
				}
				
			    public Integer dayOfWeekend;

				public Integer getDayOfWeekend () {
					return this.dayOfWeekend;
				}
				
			    public Integer timeMultiplier;

				public Integer getTimeMultiplier () {
					return this.timeMultiplier;
				}
				
			    public Integer sessionDurationMinutes;

				public Integer getSessionDurationMinutes () {
					return this.sessionDurationMinutes;
				}
				
			    public Integer configVersion;

				public Integer getConfigVersion () {
					return this.configVersion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.track = readString(dis);
					
						this.preRaceWaitingTimeSeconds = readInteger(dis);
					
						this.sessionOverTimeSeconds = readInteger(dis);
					
						this.ambientTemp = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cloudLevel = null;
           				} else {
           			    	this.cloudLevel = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.rain = null;
           				} else {
           			    	this.rain = dis.readDouble();
           				}
					
						this.weatherRandomness = readInteger(dis);
					
						this.postQualySeconds = readInteger(dis);
					
						this.postRaceSeconds = readInteger(dis);
					
					this.sessionType = readString(dis);
					
						this.hourOfDay = readInteger(dis);
					
						this.dayOfWeekend = readInteger(dis);
					
						this.timeMultiplier = readInteger(dis);
					
						this.sessionDurationMinutes = readInteger(dis);
					
						this.configVersion = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.track,dos);
					
					// Integer
				
						writeInteger(this.preRaceWaitingTimeSeconds,dos);
					
					// Integer
				
						writeInteger(this.sessionOverTimeSeconds,dos);
					
					// Integer
				
						writeInteger(this.ambientTemp,dos);
					
					// Double
				
						if(this.cloudLevel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cloudLevel);
		            	}
					
					// Double
				
						if(this.rain == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.rain);
		            	}
					
					// Integer
				
						writeInteger(this.weatherRandomness,dos);
					
					// Integer
				
						writeInteger(this.postQualySeconds,dos);
					
					// Integer
				
						writeInteger(this.postRaceSeconds,dos);
					
					// String
				
						writeString(this.sessionType,dos);
					
					// Integer
				
						writeInteger(this.hourOfDay,dos);
					
					// Integer
				
						writeInteger(this.dayOfWeekend,dos);
					
					// Integer
				
						writeInteger(this.timeMultiplier,dos);
					
					// Integer
				
						writeInteger(this.sessionDurationMinutes,dos);
					
					// Integer
				
						writeInteger(this.configVersion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("track="+track);
		sb.append(",preRaceWaitingTimeSeconds="+String.valueOf(preRaceWaitingTimeSeconds));
		sb.append(",sessionOverTimeSeconds="+String.valueOf(sessionOverTimeSeconds));
		sb.append(",ambientTemp="+String.valueOf(ambientTemp));
		sb.append(",cloudLevel="+String.valueOf(cloudLevel));
		sb.append(",rain="+String.valueOf(rain));
		sb.append(",weatherRandomness="+String.valueOf(weatherRandomness));
		sb.append(",postQualySeconds="+String.valueOf(postQualySeconds));
		sb.append(",postRaceSeconds="+String.valueOf(postRaceSeconds));
		sb.append(",sessionType="+sessionType);
		sb.append(",hourOfDay="+String.valueOf(hourOfDay));
		sb.append(",dayOfWeekend="+String.valueOf(dayOfWeekend));
		sb.append(",timeMultiplier="+String.valueOf(timeMultiplier));
		sb.append(",sessionDurationMinutes="+String.valueOf(sessionDurationMinutes));
		sb.append(",configVersion="+String.valueOf(configVersion));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
mainStruct main = new mainStruct();
sessionsStruct sessions = new sessionsStruct();





	
	/**
	 * [tJSONDocOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOutput_4", false);
		start_Hash.put("tJSONDocOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"main");
					}
				
		int tos_count_tJSONDocOutput_4 = 0;
		
	globalMap.remove("tJSONDocOutput_4_CURRENT_NODE");
	globalMap.remove("tJSONDocOutput_4_CURRENT_PATH");
	globalMap.put("tJSONDocOutput_4_NB_LINE", 0);
	java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_4 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
	globalMap.put("keyMap_tJSONDocOutput_4", keyMap_tJSONDocOutput_4);
	de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_4 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_2");
	if (tJSONDocOutput_4 != null && globalMap.get("tJSONDocOpen_2_CURRENT_NODE") != null && globalMap.get("entryNode_tJSONDocOutput_4") == null && false == false) {
		try {
			globalMap.put("tJSONDocOutput_4", tJSONDocOutput_4);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_4_ERROR_MESSAGE", e.getMessage());
			throw e;
		} 
	}
 



/**
 * [tJSONDocOutput_4 begin ] stop
 */




	
	/**
	 * [tJSONDocOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOutput_5", false);
		start_Hash.put("tJSONDocOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sessions");
					}
				
		int tos_count_tJSONDocOutput_5 = 0;
		
	globalMap.remove("tJSONDocOutput_5_CURRENT_NODE");
	globalMap.remove("tJSONDocOutput_5_CURRENT_PATH");
	globalMap.put("tJSONDocOutput_5_NB_LINE", 0);
	java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_5 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
	globalMap.put("keyMap_tJSONDocOutput_5", keyMap_tJSONDocOutput_5);
	de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_5 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOutput_4");
	if (tJSONDocOutput_5 != null && globalMap.get("tJSONDocOutput_4_CURRENT_NODE") != null && globalMap.get("entryNode_tJSONDocOutput_5") == null && false == false) {
		try {
			globalMap.put("tJSONDocOutput_5", tJSONDocOutput_5);
			String jsonPath = "$.sessions";
	   	// build path to enhance the error messages
	   	String path = null;
	   	if (jsonPath != null && jsonPath.isEmpty() == false) {
	   		if (jsonPath.startsWith("$")) {
	   			path = jsonPath;
	   		} else if (".".equals(jsonPath)) {
	   			path = (String) globalMap.get("tJSONDocOutput_4_CURRENT_PATH");
	   		} else {
	   			path = (String) globalMap.get("tJSONDocOutput_4_CURRENT_PATH") + "." + jsonPath;
	   		}
	   	} else {
   			path = (String) globalMap.get("tJSONDocOutput_4_CURRENT_PATH");
	   	}
	   	globalMap.put("tJSONDocOutput_5_CURRENT_PATH", path);
	   	tJSONDocOutput_5.setCurrentPath(path);
			// get the parent object we have to dock on
			com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_5 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_4_CURRENT_NODE");
			globalMap.put("entryNode_tJSONDocOutput_5", entryNode_tJSONDocOutput_5);
			// take care the path will be created as array
			if (".".equals(jsonPath) == false) {
				if (jsonPath == null) {
					jsonPath = "[" + Integer.MAX_VALUE + "]";
				} else if (jsonPath.endsWith("]") == false) {
					jsonPath = jsonPath + "[" + Integer.MAX_VALUE + "]"; // take care we never hit an existing array element
					// this way we get the array itself as result of getNode(...)
				}
			}
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_5.getNode(entryNode_tJSONDocOutput_5, jsonPath, true);
			com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_5 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				parentNode_tJSONDocOutput_5 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
				globalMap.put("parent_node_tJSONDocOutput_5", parentNode_tJSONDocOutput_5);
			} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				throw new Exception(path + ": Actually an ArrayNode is expected, but there is already an ObjectNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": Actually an ArrayNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_5_ERROR_MESSAGE", e.getMessage());
			throw e;
		} 
	}
 



/**
 * [tJSONDocOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
mainStruct main_tmp = new mainStruct();
sessionsStruct sessions_tmp = new sessionsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:VXGTUa4iB2wHgzYojf9nZ3tJzfPeic/Dz1Qdxw==");
        String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
        if (password_tFileInputExcel_2.isEmpty()){
            password_tFileInputExcel_2 = null;
        }
			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = context.filepath + context.filename;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_2), password_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_2, password_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, context.json_event, false));
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row2 = null;
					int tempRowLength_tFileInputExcel_2 = 15;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row2 = new row2Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "track";

				row2.track = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.track = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "preRaceWaitingTimeSeconds";

				row2.preRaceWaitingTimeSeconds = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.preRaceWaitingTimeSeconds = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "sessionOverTimeSeconds";

				row2.sessionOverTimeSeconds = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.sessionOverTimeSeconds = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "ambientTemp";

				row2.ambientTemp = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.ambientTemp = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 4;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "cloudLevel";

				row2.cloudLevel = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.cloudLevel = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 5;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "rain";

				row2.rain = ParserUtils.parseTo_Double(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.rain = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 6;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "weatherRandomness";

				row2.weatherRandomness = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.weatherRandomness = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 7;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "postQualySeconds";

				row2.postQualySeconds = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.postQualySeconds = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 8;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "postRaceSeconds";

				row2.postRaceSeconds = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.postRaceSeconds = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 9;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "sessionType";

				row2.sessionType = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.sessionType = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 10;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "hourOfDay";

				row2.hourOfDay = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.hourOfDay = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 11;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "dayOfWeekend";

				row2.dayOfWeekend = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.dayOfWeekend = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 12;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "timeMultiplier";

				row2.timeMultiplier = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.timeMultiplier = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 13;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "sessionDurationMinutes";

				row2.sessionDurationMinutes = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.sessionDurationMinutes = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 14;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "configVersion";

				row2.configVersion = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row2.configVersion = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
	            throw(e);
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
	
	/**
	 * [tFileInputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

main = null;
sessions = null;


// # Output table : 'main'
main_tmp.track = row2.track;
main_tmp.preRaceWaitingTimeSeconds = row2.preRaceWaitingTimeSeconds;
main_tmp.sessionOverTimeSeconds = row2.sessionOverTimeSeconds;
main_tmp.ambientTemp = row2.ambientTemp;
main_tmp.cloudLevel = row2.cloudLevel;
main_tmp.rain = row2.rain;
main_tmp.weatherRandomness = row2.weatherRandomness;
main_tmp.postQualySeconds = row2.postQualySeconds;
main_tmp.postRaceSeconds = row2.postRaceSeconds;
main_tmp.configVersion = row2.configVersion;
main = main_tmp;

// # Output table : 'sessions'
sessions_tmp.hourOfDay = row2.hourOfDay;
sessions_tmp.dayOfWeekend = row2.dayOfWeekend;
sessions_tmp.timeMultiplier = row2.timeMultiplier;
sessions_tmp.sessionType = row2.sessionType;
sessions_tmp.sessionDurationMinutes = row2.sessionDurationMinutes;
sessions = sessions_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "main"
if(main != null) { 



	
	/**
	 * [tJSONDocOutput_4 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"main");
					}
					
   // the entryNode is the node which receives our current values (new object(s), or array(s))
	com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_4 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_2_CURRENT_NODE");
	if (entryNode_tJSONDocOutput_4 != null) {
		String jsonPath = "$";
		// build path to enhance the error messages
		String path = null;
		if (jsonPath != null && jsonPath.isEmpty() == false) {
			if (jsonPath.startsWith("$")) {
				path = jsonPath;
			} else if (".".equals(jsonPath)) {
				path = (String) globalMap.get("tJSONDocOpen_2_CURRENT_PATH");
			} else {
				path = (String) globalMap.get("tJSONDocOpen_2_CURRENT_PATH") + "." + jsonPath;
			}
		} else {
			path = (String) globalMap.get("tJSONDocOpen_2_CURRENT_PATH");
		}
		/* we have to initialize the current node (which we want to create):
		 * if there is no parent node
		 * if there is a different entry node then in previous flow record
		 * if there is a different path then in previous flow record
		 */
		if (globalMap.get("entryNode_tJSONDocOutput_4") == null 
			|| (path.equals(globalMap.get("tJSONDocOutput_4_CURRENT_PATH")) == false)
			|| (globalMap.get("entryNode_tJSONDocOutput_4") != entryNode_tJSONDocOutput_4)) {
			try {
				tJSONDocOutput_4 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_2");
				globalMap.put("tJSONDocOutput_4", tJSONDocOutput_4);
				// get the parent object we have to dock on
				globalMap.put("entryNode_tJSONDocOutput_4", entryNode_tJSONDocOutput_4);
	   		globalMap.put("tJSONDocOutput_4_CURRENT_PATH", path);
	   		tJSONDocOutput_4.setCurrentPath(path);
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_4.getNode(entryNode_tJSONDocOutput_4, jsonPath, true);
			com.fasterxml.jackson.databind.node.ObjectNode parentNode_tJSONDocOutput_4 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				parentNode_tJSONDocOutput_4 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
			} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is already an ArrayNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
			globalMap.put("parent_node_tJSONDocOutput_4", parentNode_tJSONDocOutput_4);
			globalMap.put("tJSONDocOutput_4_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_4_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
   }	
	try { // start block for tJSONDocOutput_4
		// get the parent node
		com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("parent_node_tJSONDocOutput_4");
		com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_4 = null;
		if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
			currentNode_tJSONDocOutput_4 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
		} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
			throw new Exception(globalMap.get("tJSONDocOutput_4_CURRENT_PATH") + ": Actually as parent an ObjectNode is expected, but there is already an ArrayNode: " + node + ". Check the configuration.");
		} else {
			throw new Exception(globalMap.get("tJSONDocOutput_4_CURRENT_PATH") + ": Actually as parent an ObjectNode is expected, but there is anything else (or null): " + node + ". Check the configuration.");
		}
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "track";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.track, false);
		}
		globalMap.put("tJSONDocOutput_4.track", main.track);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "preRaceWaitingTimeSeconds";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.preRaceWaitingTimeSeconds, false);
		}
		globalMap.put("tJSONDocOutput_4.preRaceWaitingTimeSeconds", main.preRaceWaitingTimeSeconds);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "sessionOverTimeSeconds";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.sessionOverTimeSeconds, false);
		}
		globalMap.put("tJSONDocOutput_4.sessionOverTimeSeconds", main.sessionOverTimeSeconds);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "ambientTemp";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.ambientTemp, false);
		}
		globalMap.put("tJSONDocOutput_4.ambientTemp", main.ambientTemp);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "cloudLevel";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.cloudLevel, false);
		}
		globalMap.put("tJSONDocOutput_4.cloudLevel", main.cloudLevel);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "rain";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.rain, false);
		}
		globalMap.put("tJSONDocOutput_4.rain", main.rain);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "weatherRandomness";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.weatherRandomness, false);
		}
		globalMap.put("tJSONDocOutput_4.weatherRandomness", main.weatherRandomness);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "postQualySeconds";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.postQualySeconds, false);
		}
		globalMap.put("tJSONDocOutput_4.postQualySeconds", main.postQualySeconds);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "postRaceSeconds";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.postRaceSeconds, false);
		}
		globalMap.put("tJSONDocOutput_4.postRaceSeconds", main.postRaceSeconds);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "configVersion";
			}
			tJSONDocOutput_4.setValue(currentNode_tJSONDocOutput_4, fieldName, main.configVersion, false);
		}
		globalMap.put("tJSONDocOutput_4.configVersion", main.configVersion);
		globalMap.put("tJSONDocOutput_4_CURRENT_NODE", currentNode_tJSONDocOutput_4);
		Integer counter_tJSONDocOutput_4 = (Integer) globalMap.get("tJSONDocOutput_4_NB_LINE");
		globalMap.put("tJSONDocOutput_4_NB_LINE", counter_tJSONDocOutput_4.intValue() + 1);
	} catch (Exception e) {
		globalMap.put("tJSONDocOutput_4_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	} else {
		throw new Exception("The referenced current document from component: tJSONDocOpen_2 is null. Please check the job structur!");
	} 
 


	tos_count_tJSONDocOutput_4++;

/**
 * [tJSONDocOutput_4 main ] stop
 */
	
	/**
	 * [tJSONDocOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_4";

	

 



/**
 * [tJSONDocOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_4";

	

 



/**
 * [tJSONDocOutput_4 process_data_end ] stop
 */

} // End of branch "main"




// Start of branch "sessions"
if(sessions != null) { 



	
	/**
	 * [tJSONDocOutput_5 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sessions");
					}
					
   // the entryNode is the node which receives our current values (new object(s), or array(s))
	com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_5 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_4_CURRENT_NODE");
	if (entryNode_tJSONDocOutput_5 != null) {
		String jsonPath = "$.sessions";
		// build path to enhance the error messages
		String path = null;
		if (jsonPath != null && jsonPath.isEmpty() == false) {
			if (jsonPath.startsWith("$")) {
				path = jsonPath;
			} else if (".".equals(jsonPath)) {
				path = (String) globalMap.get("tJSONDocOutput_4_CURRENT_PATH");
			} else {
				path = (String) globalMap.get("tJSONDocOutput_4_CURRENT_PATH") + "." + jsonPath;
			}
		} else {
			path = (String) globalMap.get("tJSONDocOutput_4_CURRENT_PATH");
		}
		/* we have to initialize the current node (which we want to create):
		 * if there is no parent node
		 * if there is a different entry node then in previous flow record
		 * if there is a different path then in previous flow record
		 */
		if (globalMap.get("entryNode_tJSONDocOutput_5") == null 
			|| (path.equals(globalMap.get("tJSONDocOutput_5_CURRENT_PATH")) == false)
			|| (globalMap.get("entryNode_tJSONDocOutput_5") != entryNode_tJSONDocOutput_5)) {
			try {
				tJSONDocOutput_5 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOutput_4");
				globalMap.put("tJSONDocOutput_5", tJSONDocOutput_5);
				// get the parent object we have to dock on
				globalMap.put("entryNode_tJSONDocOutput_5", entryNode_tJSONDocOutput_5);
	   		globalMap.put("tJSONDocOutput_5_CURRENT_PATH", path);
	   		tJSONDocOutput_5.setCurrentPath(path);
			// take care the path will be created as array
			if (".".equals(jsonPath) == false) {
				if (jsonPath == null) {
					jsonPath = "[" + Integer.MAX_VALUE + "]";
				} else if (jsonPath.endsWith("]") == false) {
					jsonPath = jsonPath + "[" + Integer.MAX_VALUE + "]"; // take care we never hit an existing array element
					// this way we get the array itself as result of getNode(...)
				}
			}
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_5.getNode(entryNode_tJSONDocOutput_5, jsonPath, true);
			com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_5 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				parentNode_tJSONDocOutput_5 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
			} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				throw new Exception(path + ": ArrayNode is expected, but there is already an ObjectNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": ArrayNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
			globalMap.put("parent_node_tJSONDocOutput_5", parentNode_tJSONDocOutput_5);
			globalMap.put("tJSONDocOutput_5_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_5_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
   }	
	try { // start block for tJSONDocOutput_5
		// get the parent node
		com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("parent_node_tJSONDocOutput_5");
		com.fasterxml.jackson.databind.node.ArrayNode parentNode = null;
		if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
			parentNode = (com.fasterxml.jackson.databind.node.ArrayNode) node;
		} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
			throw new Exception(globalMap.get("tJSONDocOutput_5_CURRENT_PATH") + ": Actually as parent an ArrayNode is expected, but there is already an ObjectNode: " + node + ". Check the configuration.");
		} else {
			throw new Exception(globalMap.get("tJSONDocOutput_5_CURRENT_PATH") + ": Actually as parent an ArrayNode is expected, but there is anything else (or null): " + node + ". Check the configuration.");
		}
		com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_5 = parentNode.addObject();
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "hourOfDay";
			}
			tJSONDocOutput_5.setValue(currentNode_tJSONDocOutput_5, fieldName, sessions.hourOfDay, false);
		}
		globalMap.put("tJSONDocOutput_5.hourOfDay", sessions.hourOfDay);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "dayOfWeekend";
			}
			tJSONDocOutput_5.setValue(currentNode_tJSONDocOutput_5, fieldName, sessions.dayOfWeekend, false);
		}
		globalMap.put("tJSONDocOutput_5.dayOfWeekend", sessions.dayOfWeekend);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "timeMultiplier";
			}
			tJSONDocOutput_5.setValue(currentNode_tJSONDocOutput_5, fieldName, sessions.timeMultiplier, false);
		}
		globalMap.put("tJSONDocOutput_5.timeMultiplier", sessions.timeMultiplier);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "sessionType";
			}
			tJSONDocOutput_5.setValue(currentNode_tJSONDocOutput_5, fieldName, sessions.sessionType, false);
		}
		globalMap.put("tJSONDocOutput_5.sessionType", sessions.sessionType);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "sessionDurationMinutes";
			}
			tJSONDocOutput_5.setValue(currentNode_tJSONDocOutput_5, fieldName, sessions.sessionDurationMinutes, false);
		}
		globalMap.put("tJSONDocOutput_5.sessionDurationMinutes", sessions.sessionDurationMinutes);
		globalMap.put("tJSONDocOutput_5_CURRENT_NODE", currentNode_tJSONDocOutput_5);
		Integer counter_tJSONDocOutput_5 = (Integer) globalMap.get("tJSONDocOutput_5_NB_LINE");
		globalMap.put("tJSONDocOutput_5_NB_LINE", counter_tJSONDocOutput_5.intValue() + 1);
	} catch (Exception e) {
		globalMap.put("tJSONDocOutput_5_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	} else {
		throw new Exception("The referenced current document from component: tJSONDocOutput_4 is null. Please check the job structur!");
	} 
 


	tos_count_tJSONDocOutput_5++;

/**
 * [tJSONDocOutput_5 main ] stop
 */
	
	/**
	 * [tJSONDocOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_5";

	

 



/**
 * [tJSONDocOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_5";

	

 



/**
 * [tJSONDocOutput_5 process_data_end ] stop
 */

} // End of branch "sessions"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJSONDocOutput_4 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_4";

	
	globalMap.remove("entryNode_tJSONDocOutput_4");
    globalMap.put("tJSONDocOutput_4_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util.buildSQLInClause(keyMap_tJSONDocOutput_4.keySet(), "='0'"));
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"main");
			  	}
			  	
 

ok_Hash.put("tJSONDocOutput_4", true);
end_Hash.put("tJSONDocOutput_4", System.currentTimeMillis());




/**
 * [tJSONDocOutput_4 end ] stop
 */




	
	/**
	 * [tJSONDocOutput_5 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_5";

	
	globalMap.remove("entryNode_tJSONDocOutput_5");
    globalMap.put("tJSONDocOutput_5_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util.buildSQLInClause(keyMap_tJSONDocOutput_5.keySet(), "='0'"));
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sessions");
			  	}
			  	
 

ok_Hash.put("tJSONDocOutput_5", true);
end_Hash.put("tJSONDocOutput_5", System.currentTimeMillis());




/**
 * [tJSONDocOutput_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tJSONDocSave_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJSONDocOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_4";

	

 



/**
 * [tJSONDocOutput_4 finally ] stop
 */




	
	/**
	 * [tJSONDocOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_5";

	

 



/**
 * [tJSONDocOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	

public void tJSONDocSave_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJSONDocSave_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJSONDocSave_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocSave_2", false);
		start_Hash.put("tJSONDocSave_2", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocSave_2";

	
		int tos_count_tJSONDocSave_2 = 0;
		
	de.jlo.talendcomp.json.JsonDocument tJSONDocSave_2 = new de.jlo.talendcomp.json.JsonDocument((com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_4_CURRENT_NODE"));
	globalMap.put("tJSONDocSave_2", tJSONDocSave_2);	
	com.fasterxml.jackson.databind.JsonNode tJSONDocSave_2_outputNode = null;
	try {
		tJSONDocSave_2_outputNode = tJSONDocSave_2.getConditionalUnwrappedRootNode((false), true);
		globalMap.put("tJSONDocSave_2_CURRENT_NODE", tJSONDocSave_2_outputNode);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_2_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	String filePath_tJSONDocSave_2 = context.filepath + context.json_event + ".json";
	try {
		tJSONDocSave_2.writeToFile(filePath_tJSONDocSave_2, true, false);
		globalMap.put("tJSONDocSave_2_OUTPUT_FILE_PATH", filePath_tJSONDocSave_2);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_2_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	Object jsonOutput_tJSONDocSave_2 = null;
	try {
		jsonOutput_tJSONDocSave_2 = tJSONDocSave_2.getJsonString(tJSONDocSave_2_outputNode, true, false);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_2_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	globalMap.put("tJSONDocSave_2_JSON_STRING", (String) jsonOutput_tJSONDocSave_2);
	
 



/**
 * [tJSONDocSave_2 begin ] stop
 */
	
	/**
	 * [tJSONDocSave_2 main ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_2";

	

 


	tos_count_tJSONDocSave_2++;

/**
 * [tJSONDocSave_2 main ] stop
 */
	
	/**
	 * [tJSONDocSave_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_2";

	

 



/**
 * [tJSONDocSave_2 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocSave_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_2";

	

 



/**
 * [tJSONDocSave_2 process_data_end ] stop
 */
	
	/**
	 * [tJSONDocSave_2 end ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_2";

	

		 
	
 

ok_Hash.put("tJSONDocSave_2", true);
end_Hash.put("tJSONDocSave_2", System.currentTimeMillis());




/**
 * [tJSONDocSave_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJSONDocSave_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tJSONDocOpen_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJSONDocSave_2 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_2";

	

 



/**
 * [tJSONDocSave_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJSONDocSave_2_SUBPROCESS_STATE", 1);
	}
	

public void tJSONDocOpen_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJSONDocOpen_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJSONDocOpen_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOpen_3", false);
		start_Hash.put("tJSONDocOpen_3", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOpen_3";

	
		int tos_count_tJSONDocOpen_3 = 0;
		


 



/**
 * [tJSONDocOpen_3 begin ] stop
 */
	
	/**
	 * [tJSONDocOpen_3 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_3";

	
	globalMap.remove("tJSONDocOpen_3_CURRENT_NODE");
	globalMap.put("tJSONDocOpen_3_COUNT_ROOT_OBJECTS", 0);
   	try {
		de.jlo.talendcomp.json.JsonDocument tJSONDocOpen_3 = new de.jlo.talendcomp.json.JsonDocument(false); 
		globalMap.put("tJSONDocOpen_3", tJSONDocOpen_3);
		globalMap.put("tJSONDocOpen_3_CURRENT_NODE", tJSONDocOpen_3.getRootNode());
		globalMap.put("tJSONDocOpen_3_CURRENT_PATH", "$");
		globalMap.put("tJSONDocOpen_3_COUNT_ROOT_OBJECTS", tJSONDocOpen_3.getCountRootObjects());	
	} catch (Exception e) {
   		globalMap.put("tJSONDocOpen_3_ERROR_MESSAGE", e.getMessage());
   		throw e;
	}

 


	tos_count_tJSONDocOpen_3++;

/**
 * [tJSONDocOpen_3 main ] stop
 */
	
	/**
	 * [tJSONDocOpen_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_3";

	

 



/**
 * [tJSONDocOpen_3 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOpen_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_3";

	

 



/**
 * [tJSONDocOpen_3 process_data_end ] stop
 */
	
	/**
	 * [tJSONDocOpen_3 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_3";

	

 

ok_Hash.put("tJSONDocOpen_3", true);
end_Hash.put("tJSONDocOpen_3", System.currentTimeMillis());




/**
 * [tJSONDocOpen_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJSONDocOpen_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tFileInputExcel_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJSONDocOpen_3 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_3";

	

 



/**
 * [tJSONDocOpen_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJSONDocOpen_3_SUBPROCESS_STATE", 1);
	}
	


public static class eventRulesStruct implements routines.system.IPersistableRow<eventRulesStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public Integer qualifyStandingType;

				public Integer getQualifyStandingType () {
					return this.qualifyStandingType;
				}
				
			    public Integer pitWindowLengthSec;

				public Integer getPitWindowLengthSec () {
					return this.pitWindowLengthSec;
				}
				
			    public Integer driverStintTimeSec;

				public Integer getDriverStintTimeSec () {
					return this.driverStintTimeSec;
				}
				
			    public Boolean isPitstopAllowedInPractice;

				public Boolean getIsPitstopAllowedInPractice () {
					return this.isPitstopAllowedInPractice;
				}
				
			    public Boolean isRefuellingAllowedInRace;

				public Boolean getIsRefuellingAllowedInRace () {
					return this.isRefuellingAllowedInRace;
				}
				
			    public Integer tyreSetCount;

				public Integer getTyreSetCount () {
					return this.tyreSetCount;
				}
				
			    public Integer maxDriversCount;

				public Integer getMaxDriversCount () {
					return this.maxDriversCount;
				}
				
			    public Integer maxTotalDrivingTime;

				public Integer getMaxTotalDrivingTime () {
					return this.maxTotalDrivingTime;
				}
				
			    public Integer mandatoryPitstopCount;

				public Integer getMandatoryPitstopCount () {
					return this.mandatoryPitstopCount;
				}
				
			    public Boolean isMandatoryPitstopRefuellingRequired;

				public Boolean getIsMandatoryPitstopRefuellingRequired () {
					return this.isMandatoryPitstopRefuellingRequired;
				}
				
			    public Boolean isMandatoryPitstopTyreChangeRequired;

				public Boolean getIsMandatoryPitstopTyreChangeRequired () {
					return this.isMandatoryPitstopTyreChangeRequired;
				}
				
			    public Boolean isMandatoryPitstopSwapDriverRequired;

				public Boolean getIsMandatoryPitstopSwapDriverRequired () {
					return this.isMandatoryPitstopSwapDriverRequired;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
						this.qualifyStandingType = readInteger(dis);
					
						this.pitWindowLengthSec = readInteger(dis);
					
						this.driverStintTimeSec = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isPitstopAllowedInPractice = null;
           				} else {
           			    	this.isPitstopAllowedInPractice = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isRefuellingAllowedInRace = null;
           				} else {
           			    	this.isRefuellingAllowedInRace = dis.readBoolean();
           				}
					
						this.tyreSetCount = readInteger(dis);
					
						this.maxDriversCount = readInteger(dis);
					
						this.maxTotalDrivingTime = readInteger(dis);
					
						this.mandatoryPitstopCount = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isMandatoryPitstopRefuellingRequired = null;
           				} else {
           			    	this.isMandatoryPitstopRefuellingRequired = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isMandatoryPitstopTyreChangeRequired = null;
           				} else {
           			    	this.isMandatoryPitstopTyreChangeRequired = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isMandatoryPitstopSwapDriverRequired = null;
           				} else {
           			    	this.isMandatoryPitstopSwapDriverRequired = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.qualifyStandingType,dos);
					
					// Integer
				
						writeInteger(this.pitWindowLengthSec,dos);
					
					// Integer
				
						writeInteger(this.driverStintTimeSec,dos);
					
					// Boolean
				
						if(this.isPitstopAllowedInPractice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isPitstopAllowedInPractice);
		            	}
					
					// Boolean
				
						if(this.isRefuellingAllowedInRace == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isRefuellingAllowedInRace);
		            	}
					
					// Integer
				
						writeInteger(this.tyreSetCount,dos);
					
					// Integer
				
						writeInteger(this.maxDriversCount,dos);
					
					// Integer
				
						writeInteger(this.maxTotalDrivingTime,dos);
					
					// Integer
				
						writeInteger(this.mandatoryPitstopCount,dos);
					
					// Boolean
				
						if(this.isMandatoryPitstopRefuellingRequired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isMandatoryPitstopRefuellingRequired);
		            	}
					
					// Boolean
				
						if(this.isMandatoryPitstopTyreChangeRequired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isMandatoryPitstopTyreChangeRequired);
		            	}
					
					// Boolean
				
						if(this.isMandatoryPitstopSwapDriverRequired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isMandatoryPitstopSwapDriverRequired);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("qualifyStandingType="+String.valueOf(qualifyStandingType));
		sb.append(",pitWindowLengthSec="+String.valueOf(pitWindowLengthSec));
		sb.append(",driverStintTimeSec="+String.valueOf(driverStintTimeSec));
		sb.append(",isPitstopAllowedInPractice="+String.valueOf(isPitstopAllowedInPractice));
		sb.append(",isRefuellingAllowedInRace="+String.valueOf(isRefuellingAllowedInRace));
		sb.append(",tyreSetCount="+String.valueOf(tyreSetCount));
		sb.append(",maxDriversCount="+String.valueOf(maxDriversCount));
		sb.append(",maxTotalDrivingTime="+String.valueOf(maxTotalDrivingTime));
		sb.append(",mandatoryPitstopCount="+String.valueOf(mandatoryPitstopCount));
		sb.append(",isMandatoryPitstopRefuellingRequired="+String.valueOf(isMandatoryPitstopRefuellingRequired));
		sb.append(",isMandatoryPitstopTyreChangeRequired="+String.valueOf(isMandatoryPitstopTyreChangeRequired));
		sb.append(",isMandatoryPitstopSwapDriverRequired="+String.valueOf(isMandatoryPitstopSwapDriverRequired));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eventRulesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public Integer qualifyStandingType;

				public Integer getQualifyStandingType () {
					return this.qualifyStandingType;
				}
				
			    public Integer pitWindowLengthSec;

				public Integer getPitWindowLengthSec () {
					return this.pitWindowLengthSec;
				}
				
			    public Integer driverStintTimeSec;

				public Integer getDriverStintTimeSec () {
					return this.driverStintTimeSec;
				}
				
			    public Boolean isPitstopAllowedInPractice;

				public Boolean getIsPitstopAllowedInPractice () {
					return this.isPitstopAllowedInPractice;
				}
				
			    public Boolean isRefuellingAllowedInRace;

				public Boolean getIsRefuellingAllowedInRace () {
					return this.isRefuellingAllowedInRace;
				}
				
			    public Integer tyreSetCount;

				public Integer getTyreSetCount () {
					return this.tyreSetCount;
				}
				
			    public Integer maxDriversCount;

				public Integer getMaxDriversCount () {
					return this.maxDriversCount;
				}
				
			    public Integer maxTotalDrivingTime;

				public Integer getMaxTotalDrivingTime () {
					return this.maxTotalDrivingTime;
				}
				
			    public Integer mandatoryPitstopCount;

				public Integer getMandatoryPitstopCount () {
					return this.mandatoryPitstopCount;
				}
				
			    public Boolean isMandatoryPitstopRefuellingRequired;

				public Boolean getIsMandatoryPitstopRefuellingRequired () {
					return this.isMandatoryPitstopRefuellingRequired;
				}
				
			    public Boolean isMandatoryPitstopTyreChangeRequired;

				public Boolean getIsMandatoryPitstopTyreChangeRequired () {
					return this.isMandatoryPitstopTyreChangeRequired;
				}
				
			    public Boolean isMandatoryPitstopSwapDriverRequired;

				public Boolean getIsMandatoryPitstopSwapDriverRequired () {
					return this.isMandatoryPitstopSwapDriverRequired;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
						this.qualifyStandingType = readInteger(dis);
					
						this.pitWindowLengthSec = readInteger(dis);
					
						this.driverStintTimeSec = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isPitstopAllowedInPractice = null;
           				} else {
           			    	this.isPitstopAllowedInPractice = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isRefuellingAllowedInRace = null;
           				} else {
           			    	this.isRefuellingAllowedInRace = dis.readBoolean();
           				}
					
						this.tyreSetCount = readInteger(dis);
					
						this.maxDriversCount = readInteger(dis);
					
						this.maxTotalDrivingTime = readInteger(dis);
					
						this.mandatoryPitstopCount = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isMandatoryPitstopRefuellingRequired = null;
           				} else {
           			    	this.isMandatoryPitstopRefuellingRequired = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isMandatoryPitstopTyreChangeRequired = null;
           				} else {
           			    	this.isMandatoryPitstopTyreChangeRequired = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.isMandatoryPitstopSwapDriverRequired = null;
           				} else {
           			    	this.isMandatoryPitstopSwapDriverRequired = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.qualifyStandingType,dos);
					
					// Integer
				
						writeInteger(this.pitWindowLengthSec,dos);
					
					// Integer
				
						writeInteger(this.driverStintTimeSec,dos);
					
					// Boolean
				
						if(this.isPitstopAllowedInPractice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isPitstopAllowedInPractice);
		            	}
					
					// Boolean
				
						if(this.isRefuellingAllowedInRace == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isRefuellingAllowedInRace);
		            	}
					
					// Integer
				
						writeInteger(this.tyreSetCount,dos);
					
					// Integer
				
						writeInteger(this.maxDriversCount,dos);
					
					// Integer
				
						writeInteger(this.maxTotalDrivingTime,dos);
					
					// Integer
				
						writeInteger(this.mandatoryPitstopCount,dos);
					
					// Boolean
				
						if(this.isMandatoryPitstopRefuellingRequired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isMandatoryPitstopRefuellingRequired);
		            	}
					
					// Boolean
				
						if(this.isMandatoryPitstopTyreChangeRequired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isMandatoryPitstopTyreChangeRequired);
		            	}
					
					// Boolean
				
						if(this.isMandatoryPitstopSwapDriverRequired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.isMandatoryPitstopSwapDriverRequired);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("qualifyStandingType="+String.valueOf(qualifyStandingType));
		sb.append(",pitWindowLengthSec="+String.valueOf(pitWindowLengthSec));
		sb.append(",driverStintTimeSec="+String.valueOf(driverStintTimeSec));
		sb.append(",isPitstopAllowedInPractice="+String.valueOf(isPitstopAllowedInPractice));
		sb.append(",isRefuellingAllowedInRace="+String.valueOf(isRefuellingAllowedInRace));
		sb.append(",tyreSetCount="+String.valueOf(tyreSetCount));
		sb.append(",maxDriversCount="+String.valueOf(maxDriversCount));
		sb.append(",maxTotalDrivingTime="+String.valueOf(maxTotalDrivingTime));
		sb.append(",mandatoryPitstopCount="+String.valueOf(mandatoryPitstopCount));
		sb.append(",isMandatoryPitstopRefuellingRequired="+String.valueOf(isMandatoryPitstopRefuellingRequired));
		sb.append(",isMandatoryPitstopTyreChangeRequired="+String.valueOf(isMandatoryPitstopTyreChangeRequired));
		sb.append(",isMandatoryPitstopSwapDriverRequired="+String.valueOf(isMandatoryPitstopSwapDriverRequired));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_1 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_1> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();
eventRulesStruct eventRules = new eventRulesStruct();




	
	/**
	 * [tDenormalize_1_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_DenormalizeOut", false);
		start_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tDenormalize_1_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_1_DenormalizeOut {
StringBuilder data = new StringBuilder();
}
DenormalizeStructtDenormalize_1_DenormalizeOut denormalize_result_tDenormalize_1_DenormalizeOut = null;

 



/**
 * [tDenormalize_1_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tFileInputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_3", false);
		start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_3";

	
		int tos_count_tFileInputExcel_3 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:urPcHAIIavez5p14OpFTIBXWqbWejJBuhn7EmQ==");
        String password_tFileInputExcel_3 = decryptedPassword_tFileInputExcel_3;
        if (password_tFileInputExcel_3.isEmpty()){
            password_tFileInputExcel_3 = null;
        }
			class RegexUtil_tFileInputExcel_3 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();

		Object source_tFileInputExcel_3 = context.filepath + context.filename;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_3 = null;

		if(source_tFileInputExcel_3 instanceof String){
			workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_3), password_tFileInputExcel_3);
		} else if(source_tFileInputExcel_3 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_3, password_tFileInputExcel_3);
		} else{
			workbook_tFileInputExcel_3 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_3.addAll(regexUtil_tFileInputExcel_3.getSheets(workbook_tFileInputExcel_3, "eventRules", false));
    	if(sheetList_tFileInputExcel_3.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
			if(sheet_FilterNull_tFileInputExcel_3!=null && sheetList_FilterNull_tFileInputExcel_3.iterator()!=null && sheet_FilterNull_tFileInputExcel_3.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_3.add(sheet_FilterNull_tFileInputExcel_3);
			}
		}
		sheetList_tFileInputExcel_3 = sheetList_FilterNull_tFileInputExcel_3;
	if(sheetList_tFileInputExcel_3.size()>0){
		int nb_line_tFileInputExcel_3 = 0;

        int begin_line_tFileInputExcel_3 = 0;

        int footer_input_tFileInputExcel_3 = 0;

        int end_line_tFileInputExcel_3=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3:sheetList_tFileInputExcel_3){
			end_line_tFileInputExcel_3+=(sheet_tFileInputExcel_3.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
        int limit_tFileInputExcel_3 = 12;
        int start_column_tFileInputExcel_3 = 2-1;
        int end_column_tFileInputExcel_3 = -1;
        Integer lastColumn_tFileInputExcel_3 = 2;
        if(lastColumn_tFileInputExcel_3!=null){
        	end_column_tFileInputExcel_3 = lastColumn_tFileInputExcel_3.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_3 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3.get(0);
        int rowCount_tFileInputExcel_3 = 0;
        int sheetIndex_tFileInputExcel_3 = 0;
        int currentRows_tFileInputExcel_3 = (sheetList_tFileInputExcel_3.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_3 = df_tFileInputExcel_3.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++){

        	int emptyColumnCount_tFileInputExcel_3 = 0;

        	if (limit_tFileInputExcel_3 != -1 && nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
        		break;
        	}

            while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3 + currentRows_tFileInputExcel_3) {
                rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
                sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3.get(++sheetIndex_tFileInputExcel_3);
                currentRows_tFileInputExcel_3 = (sheet_tFileInputExcel_3.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_3_CURRENT_SHEET",sheet_tFileInputExcel_3.getSheetName());
            if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
                row_tFileInputExcel_3 = sheet_tFileInputExcel_3.getRow(i_tFileInputExcel_3 - rowCount_tFileInputExcel_3);
            }
		    row4 = null;
					int tempRowLength_tFileInputExcel_3 = 1;
				
				int columnIndex_tFileInputExcel_3 = 0;
			
			String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];
			int excel_end_column_tFileInputExcel_3;
			if(row_tFileInputExcel_3==null){
				excel_end_column_tFileInputExcel_3=0;
			}else{
				excel_end_column_tFileInputExcel_3=row_tFileInputExcel_3.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_3;
			if(end_column_tFileInputExcel_3 == -1){
				actual_end_column_tFileInputExcel_3 = excel_end_column_tFileInputExcel_3;
			}
			else{
				actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 >	excel_end_column_tFileInputExcel_3 ? excel_end_column_tFileInputExcel_3 : end_column_tFileInputExcel_3;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_3 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_3;i++){
				if(i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3.getCell(i + start_column_tFileInputExcel_3);
					if(cell_tFileInputExcel_3!=null){
					switch (cell_tFileInputExcel_3.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_3)) {
									temp_row_tFileInputExcel_3[i] =cell_tFileInputExcel_3.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_3[i] = df_tFileInputExcel_3.format(cell_tFileInputExcel_3.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_3[i] =String.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_3.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_3)) {
											temp_row_tFileInputExcel_3[i] =cell_tFileInputExcel_3.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_3 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_3.getNumericCellValue());
										temp_row_tFileInputExcel_3[i] = ne_tFileInputExcel_3.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_3[i] =String.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_3[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_3[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_3[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_3[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_3 = false;
			row4 = new row4Struct();
			int curColNum_tFileInputExcel_3 = -1;
			String curColName_tFileInputExcel_3 = "";
			try{
							columnIndex_tFileInputExcel_3 = 0;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "data";

				row4.data = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row4.data = null;
				emptyColumnCount_tFileInputExcel_3++;
			}

				nb_line_tFileInputExcel_3++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_3 = true;
	            throw(e);
			}


		



 



/**
 * [tFileInputExcel_3 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 


	tos_count_tFileInputExcel_3++;

/**
 * [tFileInputExcel_3 main ] stop
 */
	
	/**
	 * [tFileInputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 



/**
 * [tFileInputExcel_3 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tDenormalize_1_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

if(denormalize_result_tDenormalize_1_DenormalizeOut == null){
	denormalize_result_tDenormalize_1_DenormalizeOut = new DenormalizeStructtDenormalize_1_DenormalizeOut();		
	denormalize_result_tDenormalize_1_DenormalizeOut.data.append(row4.data);
			
}else{		
	denormalize_result_tDenormalize_1_DenormalizeOut.data.append(";").append(row4.data);
			
}

 


	tos_count_tDenormalize_1_DenormalizeOut++;

/**
 * [tDenormalize_1_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";

	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";

	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 



/**
 * [tFileInputExcel_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_3_NB_LINE",nb_line_tFileInputExcel_3);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_3 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_3.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_3", true);
end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());




/**
 * [tFileInputExcel_3 end ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";

	
java.util.List<OnRowsEndStructtDenormalize_1> result_list_tDenormalize_1_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
if (denormalize_result_tDenormalize_1_DenormalizeOut != null) {
//generate result begin
	OnRowsEndStructtDenormalize_1 denormalize_row_tDenormalize_1_DenormalizeOut = new OnRowsEndStructtDenormalize_1();
                
	denormalize_row_tDenormalize_1_DenormalizeOut.data = denormalize_result_tDenormalize_1_DenormalizeOut.data.toString();
	
	//in the deepest end
	
	result_list_tDenormalize_1_DenormalizeOut.add(denormalize_row_tDenormalize_1_DenormalizeOut);

}
//generate result end
globalMap.put("tDenormalize_1", result_list_tDenormalize_1_DenormalizeOut);
globalMap.put("tDenormalize_1_DenormalizeOut_NB_LINE", result_list_tDenormalize_1_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tDenormalize_1_DenormalizeOut", true);
end_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_1_DenormalizeOut end ] stop
 */




	
	/**
	 * [tJSONDocOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOutput_6", false);
		start_Hash.put("tJSONDocOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eventRules");
					}
				
		int tos_count_tJSONDocOutput_6 = 0;
		
	globalMap.remove("tJSONDocOutput_6_CURRENT_NODE");
	globalMap.remove("tJSONDocOutput_6_CURRENT_PATH");
	globalMap.put("tJSONDocOutput_6_NB_LINE", 0);
	java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_6 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
	globalMap.put("keyMap_tJSONDocOutput_6", keyMap_tJSONDocOutput_6);
	de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_6 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_3");
	if (tJSONDocOutput_6 != null && globalMap.get("tJSONDocOpen_3_CURRENT_NODE") != null && globalMap.get("entryNode_tJSONDocOutput_6") == null && false == false) {
		try {
			globalMap.put("tJSONDocOutput_6", tJSONDocOutput_6);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_6_ERROR_MESSAGE", e.getMessage());
			throw e;
		} 
	}
 



/**
 * [tJSONDocOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
eventRulesStruct eventRules_tmp = new eventRulesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tExtractDelimitedFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractDelimitedFields_1", false);
		start_Hash.put("tExtractDelimitedFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractDelimitedFields_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tExtractDelimitedFields_1 = 0;
		

int nb_line_tExtractDelimitedFields_1=0;
 



/**
 * [tExtractDelimitedFields_1 begin ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_ArrayIn", false);
		start_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";

	
		int tos_count_tDenormalize_1_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_1_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_1> list_tDenormalize_1_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_1>)globalMap.get("tDenormalize_1");
        if(list_tDenormalize_1_ArrayIn == null) {
            list_tDenormalize_1_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
        }        
        for(OnRowsEndStructtDenormalize_1 row_tDenormalize_1_ArrayIn : list_tDenormalize_1_ArrayIn){
        					
    						row5.data = row_tDenormalize_1_ArrayIn.data;
    						

 



/**
 * [tDenormalize_1_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";

	

 


	tos_count_tDenormalize_1_ArrayIn++;

/**
 * [tDenormalize_1_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";

	

 



/**
 * [tDenormalize_1_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tExtractDelimitedFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

row6 = null;

row6 = new row6Struct();
	String field_tExtractDelimitedFields_1 = row5.data;
	String[] newFields_tExtractDelimitedFields_1 = new String[0];
	if(field_tExtractDelimitedFields_1!=null){// C_01
		try{
			newFields_tExtractDelimitedFields_1 = field_tExtractDelimitedFields_1.split(";",-1);
		int length_tExtractDelimitedFields_1 = newFields_tExtractDelimitedFields_1.length;
	String temp_tExtractDelimitedFields_1 = null;
	temp_tExtractDelimitedFields_1 = 0>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[0];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.qualifyStandingType = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_1);
	} else {						
		row6.qualifyStandingType = null;
	}
	temp_tExtractDelimitedFields_1 = 1>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[1];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.pitWindowLengthSec = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_1);
	} else {						
		row6.pitWindowLengthSec = null;
	}
	temp_tExtractDelimitedFields_1 = 2>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[2];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.driverStintTimeSec = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_1);
	} else {						
		row6.driverStintTimeSec = null;
	}
	temp_tExtractDelimitedFields_1 = 3>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[3];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.isPitstopAllowedInPractice = ParserUtils.parseTo_Boolean(temp_tExtractDelimitedFields_1);
	} else {						
		row6.isPitstopAllowedInPractice = null;
	}
	temp_tExtractDelimitedFields_1 = 4>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[4];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.isRefuellingAllowedInRace = ParserUtils.parseTo_Boolean(temp_tExtractDelimitedFields_1);
	} else {						
		row6.isRefuellingAllowedInRace = null;
	}
	temp_tExtractDelimitedFields_1 = 5>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[5];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.tyreSetCount = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_1);
	} else {						
		row6.tyreSetCount = null;
	}
	temp_tExtractDelimitedFields_1 = 6>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[6];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.maxDriversCount = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_1);
	} else {						
		row6.maxDriversCount = null;
	}
	temp_tExtractDelimitedFields_1 = 7>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[7];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.maxTotalDrivingTime = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_1);
	} else {						
		row6.maxTotalDrivingTime = null;
	}
	temp_tExtractDelimitedFields_1 = 8>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[8];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.mandatoryPitstopCount = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_1);
	} else {						
		row6.mandatoryPitstopCount = null;
	}
	temp_tExtractDelimitedFields_1 = 9>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[9];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.isMandatoryPitstopRefuellingRequired = ParserUtils.parseTo_Boolean(temp_tExtractDelimitedFields_1);
	} else {						
		row6.isMandatoryPitstopRefuellingRequired = null;
	}
	temp_tExtractDelimitedFields_1 = 10>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[10];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.isMandatoryPitstopTyreChangeRequired = ParserUtils.parseTo_Boolean(temp_tExtractDelimitedFields_1);
	} else {						
		row6.isMandatoryPitstopTyreChangeRequired = null;
	}
	temp_tExtractDelimitedFields_1 = 11>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[11];
	if(temp_tExtractDelimitedFields_1.length() > 0) {
		row6.isMandatoryPitstopSwapDriverRequired = ParserUtils.parseTo_Boolean(temp_tExtractDelimitedFields_1);
	} else {						
		row6.isMandatoryPitstopSwapDriverRequired = null;
	}
	nb_line_tExtractDelimitedFields_1++;
}catch(java.lang.Exception ex_tExtractDelimitedFields_1){
    System.err.println(ex_tExtractDelimitedFields_1.getMessage());
    row6 = null;
}



 


	tos_count_tExtractDelimitedFields_1++;

/**
 * [tExtractDelimitedFields_1 main ] stop
 */
	
	/**
	 * [tExtractDelimitedFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_1";

	

 



/**
 * [tExtractDelimitedFields_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

eventRules = null;


// # Output table : 'eventRules'
eventRules_tmp.qualifyStandingType = row6.qualifyStandingType;
eventRules_tmp.pitWindowLengthSec = row6.pitWindowLengthSec;
eventRules_tmp.driverStintTimeSec = row6.driverStintTimeSec;
eventRules_tmp.isPitstopAllowedInPractice = row6.isPitstopAllowedInPractice;
eventRules_tmp.isRefuellingAllowedInRace = row6.isRefuellingAllowedInRace;
eventRules_tmp.tyreSetCount = row6.tyreSetCount;
eventRules_tmp.maxDriversCount = row6.maxDriversCount;
eventRules_tmp.maxTotalDrivingTime = row6.maxTotalDrivingTime;
eventRules_tmp.mandatoryPitstopCount = row6.mandatoryPitstopCount;
eventRules_tmp.isMandatoryPitstopRefuellingRequired = row6.isMandatoryPitstopRefuellingRequired;
eventRules_tmp.isMandatoryPitstopTyreChangeRequired = row6.isMandatoryPitstopTyreChangeRequired;
eventRules_tmp.isMandatoryPitstopSwapDriverRequired = row6.isMandatoryPitstopSwapDriverRequired;
eventRules = eventRules_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "eventRules"
if(eventRules != null) { 



	
	/**
	 * [tJSONDocOutput_6 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eventRules");
					}
					
   // the entryNode is the node which receives our current values (new object(s), or array(s))
	com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_6 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_3_CURRENT_NODE");
	if (entryNode_tJSONDocOutput_6 != null) {
		String jsonPath = "$";
		// build path to enhance the error messages
		String path = null;
		if (jsonPath != null && jsonPath.isEmpty() == false) {
			if (jsonPath.startsWith("$")) {
				path = jsonPath;
			} else if (".".equals(jsonPath)) {
				path = (String) globalMap.get("tJSONDocOpen_3_CURRENT_PATH");
			} else {
				path = (String) globalMap.get("tJSONDocOpen_3_CURRENT_PATH") + "." + jsonPath;
			}
		} else {
			path = (String) globalMap.get("tJSONDocOpen_3_CURRENT_PATH");
		}
		/* we have to initialize the current node (which we want to create):
		 * if there is no parent node
		 * if there is a different entry node then in previous flow record
		 * if there is a different path then in previous flow record
		 */
		if (globalMap.get("entryNode_tJSONDocOutput_6") == null 
			|| (path.equals(globalMap.get("tJSONDocOutput_6_CURRENT_PATH")) == false)
			|| (globalMap.get("entryNode_tJSONDocOutput_6") != entryNode_tJSONDocOutput_6)) {
			try {
				tJSONDocOutput_6 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_3");
				globalMap.put("tJSONDocOutput_6", tJSONDocOutput_6);
				// get the parent object we have to dock on
				globalMap.put("entryNode_tJSONDocOutput_6", entryNode_tJSONDocOutput_6);
	   		globalMap.put("tJSONDocOutput_6_CURRENT_PATH", path);
	   		tJSONDocOutput_6.setCurrentPath(path);
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_6.getNode(entryNode_tJSONDocOutput_6, jsonPath, true);
			com.fasterxml.jackson.databind.node.ObjectNode parentNode_tJSONDocOutput_6 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				parentNode_tJSONDocOutput_6 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
			} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is already an ArrayNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
			globalMap.put("parent_node_tJSONDocOutput_6", parentNode_tJSONDocOutput_6);
			globalMap.put("tJSONDocOutput_6_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_6_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
   }	
	try { // start block for tJSONDocOutput_6
		// get the parent node
		com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("parent_node_tJSONDocOutput_6");
		com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_6 = null;
		if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
			currentNode_tJSONDocOutput_6 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
		} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
			throw new Exception(globalMap.get("tJSONDocOutput_6_CURRENT_PATH") + ": Actually as parent an ObjectNode is expected, but there is already an ArrayNode: " + node + ". Check the configuration.");
		} else {
			throw new Exception(globalMap.get("tJSONDocOutput_6_CURRENT_PATH") + ": Actually as parent an ObjectNode is expected, but there is anything else (or null): " + node + ". Check the configuration.");
		}
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "qualifyStandingType";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.qualifyStandingType, false);
		}
		globalMap.put("tJSONDocOutput_6.qualifyStandingType", eventRules.qualifyStandingType);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "pitWindowLengthSec";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.pitWindowLengthSec, false);
		}
		globalMap.put("tJSONDocOutput_6.pitWindowLengthSec", eventRules.pitWindowLengthSec);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "driverStintTimeSec";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.driverStintTimeSec, false);
		}
		globalMap.put("tJSONDocOutput_6.driverStintTimeSec", eventRules.driverStintTimeSec);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "isPitstopAllowedInPractice";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.isPitstopAllowedInPractice, false);
		}
		globalMap.put("tJSONDocOutput_6.isPitstopAllowedInPractice", eventRules.isPitstopAllowedInPractice);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "isRefuellingAllowedInRace";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.isRefuellingAllowedInRace, false);
		}
		globalMap.put("tJSONDocOutput_6.isRefuellingAllowedInRace", eventRules.isRefuellingAllowedInRace);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "tyreSetCount";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.tyreSetCount, false);
		}
		globalMap.put("tJSONDocOutput_6.tyreSetCount", eventRules.tyreSetCount);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "maxDriversCount";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.maxDriversCount, false);
		}
		globalMap.put("tJSONDocOutput_6.maxDriversCount", eventRules.maxDriversCount);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "maxTotalDrivingTime";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.maxTotalDrivingTime, false);
		}
		globalMap.put("tJSONDocOutput_6.maxTotalDrivingTime", eventRules.maxTotalDrivingTime);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "mandatoryPitstopCount";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.mandatoryPitstopCount, false);
		}
		globalMap.put("tJSONDocOutput_6.mandatoryPitstopCount", eventRules.mandatoryPitstopCount);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "isMandatoryPitstopRefuellingRequired";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.isMandatoryPitstopRefuellingRequired, false);
		}
		globalMap.put("tJSONDocOutput_6.isMandatoryPitstopRefuellingRequired", eventRules.isMandatoryPitstopRefuellingRequired);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "isMandatoryPitstopTyreChangeRequired";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.isMandatoryPitstopTyreChangeRequired, false);
		}
		globalMap.put("tJSONDocOutput_6.isMandatoryPitstopTyreChangeRequired", eventRules.isMandatoryPitstopTyreChangeRequired);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "isMandatoryPitstopSwapDriverRequired";
			}
			tJSONDocOutput_6.setValue(currentNode_tJSONDocOutput_6, fieldName, eventRules.isMandatoryPitstopSwapDriverRequired, false);
		}
		globalMap.put("tJSONDocOutput_6.isMandatoryPitstopSwapDriverRequired", eventRules.isMandatoryPitstopSwapDriverRequired);
		globalMap.put("tJSONDocOutput_6_CURRENT_NODE", currentNode_tJSONDocOutput_6);
		Integer counter_tJSONDocOutput_6 = (Integer) globalMap.get("tJSONDocOutput_6_NB_LINE");
		globalMap.put("tJSONDocOutput_6_NB_LINE", counter_tJSONDocOutput_6.intValue() + 1);
	} catch (Exception e) {
		globalMap.put("tJSONDocOutput_6_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	} else {
		throw new Exception("The referenced current document from component: tJSONDocOpen_3 is null. Please check the job structur!");
	} 
 


	tos_count_tJSONDocOutput_6++;

/**
 * [tJSONDocOutput_6 main ] stop
 */
	
	/**
	 * [tJSONDocOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_6";

	

 



/**
 * [tJSONDocOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_6";

	

 



/**
 * [tJSONDocOutput_6 process_data_end ] stop
 */

} // End of branch "eventRules"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row6"



	
		} // C_01
	
	
	/**
	 * [tExtractDelimitedFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_1";

	

 



/**
 * [tExtractDelimitedFields_1 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";

	

 



/**
 * [tDenormalize_1_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";

	
	nb_line_tDenormalize_1_ArrayIn++;
}
globalMap.put("tDenormalize_1_ArrayIn_NB_LINE",nb_line_tDenormalize_1_ArrayIn);
 

ok_Hash.put("tDenormalize_1_ArrayIn", true);
end_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_1_ArrayIn end ] stop
 */

	
	/**
	 * [tExtractDelimitedFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_1";

	

globalMap.put("tExtractDelimitedFields_1_NB_LINE",nb_line_tExtractDelimitedFields_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tExtractDelimitedFields_1", true);
end_Hash.put("tExtractDelimitedFields_1", System.currentTimeMillis());




/**
 * [tExtractDelimitedFields_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tJSONDocOutput_6 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_6";

	
	globalMap.remove("entryNode_tJSONDocOutput_6");
    globalMap.put("tJSONDocOutput_6_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util.buildSQLInClause(keyMap_tJSONDocOutput_6.keySet(), "='0'"));
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eventRules");
			  	}
			  	
 

ok_Hash.put("tJSONDocOutput_6", true);
end_Hash.put("tJSONDocOutput_6", System.currentTimeMillis());




/**
 * [tJSONDocOutput_6 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tJSONDocSave_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tDenormalize_1_ArrayIn"
							globalMap.remove("tDenormalize_1");
						
				try{
					
	
	/**
	 * [tFileInputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 



/**
 * [tFileInputExcel_3 finally ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";

	

 



/**
 * [tDenormalize_1_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_1_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";

	

 



/**
 * [tDenormalize_1_ArrayIn finally ] stop
 */

	
	/**
	 * [tExtractDelimitedFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_1";

	

 



/**
 * [tExtractDelimitedFields_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tJSONDocOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_6";

	

 



/**
 * [tJSONDocOutput_6 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}
	

public void tJSONDocSave_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJSONDocSave_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJSONDocSave_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocSave_3", false);
		start_Hash.put("tJSONDocSave_3", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocSave_3";

	
		int tos_count_tJSONDocSave_3 = 0;
		
	de.jlo.talendcomp.json.JsonDocument tJSONDocSave_3 = new de.jlo.talendcomp.json.JsonDocument((com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_6_CURRENT_NODE"));
	globalMap.put("tJSONDocSave_3", tJSONDocSave_3);	
	com.fasterxml.jackson.databind.JsonNode tJSONDocSave_3_outputNode = null;
	try {
		tJSONDocSave_3_outputNode = tJSONDocSave_3.getConditionalUnwrappedRootNode((false), true);
		globalMap.put("tJSONDocSave_3_CURRENT_NODE", tJSONDocSave_3_outputNode);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_3_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	String filePath_tJSONDocSave_3 = context.filepath + context.json_eventRules + ".json";
	try {
		tJSONDocSave_3.writeToFile(filePath_tJSONDocSave_3, true, false);
		globalMap.put("tJSONDocSave_3_OUTPUT_FILE_PATH", filePath_tJSONDocSave_3);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_3_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	Object jsonOutput_tJSONDocSave_3 = null;
	try {
		jsonOutput_tJSONDocSave_3 = tJSONDocSave_3.getJsonString(tJSONDocSave_3_outputNode, true, false);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_3_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	globalMap.put("tJSONDocSave_3_JSON_STRING", (String) jsonOutput_tJSONDocSave_3);
	
 



/**
 * [tJSONDocSave_3 begin ] stop
 */
	
	/**
	 * [tJSONDocSave_3 main ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_3";

	

 


	tos_count_tJSONDocSave_3++;

/**
 * [tJSONDocSave_3 main ] stop
 */
	
	/**
	 * [tJSONDocSave_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_3";

	

 



/**
 * [tJSONDocSave_3 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocSave_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_3";

	

 



/**
 * [tJSONDocSave_3 process_data_end ] stop
 */
	
	/**
	 * [tJSONDocSave_3 end ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_3";

	

		 
	
 

ok_Hash.put("tJSONDocSave_3", true);
end_Hash.put("tJSONDocSave_3", System.currentTimeMillis());




/**
 * [tJSONDocSave_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJSONDocSave_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tJSONDocOpen_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJSONDocSave_3 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_3";

	

 



/**
 * [tJSONDocSave_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJSONDocSave_3_SUBPROCESS_STATE", 1);
	}
	

public void tJSONDocOpen_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJSONDocOpen_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJSONDocOpen_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOpen_4", false);
		start_Hash.put("tJSONDocOpen_4", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOpen_4";

	
		int tos_count_tJSONDocOpen_4 = 0;
		


 



/**
 * [tJSONDocOpen_4 begin ] stop
 */
	
	/**
	 * [tJSONDocOpen_4 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_4";

	
	globalMap.remove("tJSONDocOpen_4_CURRENT_NODE");
	globalMap.put("tJSONDocOpen_4_COUNT_ROOT_OBJECTS", 0);
   	try {
		de.jlo.talendcomp.json.JsonDocument tJSONDocOpen_4 = new de.jlo.talendcomp.json.JsonDocument(false); 
		globalMap.put("tJSONDocOpen_4", tJSONDocOpen_4);
		globalMap.put("tJSONDocOpen_4_CURRENT_NODE", tJSONDocOpen_4.getRootNode());
		globalMap.put("tJSONDocOpen_4_CURRENT_PATH", "$");
		globalMap.put("tJSONDocOpen_4_COUNT_ROOT_OBJECTS", tJSONDocOpen_4.getCountRootObjects());	
	} catch (Exception e) {
   		globalMap.put("tJSONDocOpen_4_ERROR_MESSAGE", e.getMessage());
   		throw e;
	}

 


	tos_count_tJSONDocOpen_4++;

/**
 * [tJSONDocOpen_4 main ] stop
 */
	
	/**
	 * [tJSONDocOpen_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_4";

	

 



/**
 * [tJSONDocOpen_4 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOpen_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_4";

	

 



/**
 * [tJSONDocOpen_4 process_data_end ] stop
 */
	
	/**
	 * [tJSONDocOpen_4 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_4";

	

 

ok_Hash.put("tJSONDocOpen_4", true);
end_Hash.put("tJSONDocOpen_4", System.currentTimeMillis());




/**
 * [tJSONDocOpen_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJSONDocOpen_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tFileInputExcel_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJSONDocOpen_4 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_4";

	

 



/**
 * [tJSONDocOpen_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJSONDocOpen_4_SUBPROCESS_STATE", 1);
	}
	


public static class settingsStruct implements routines.system.IPersistableRow<settingsStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String serverName;

				public String getServerName () {
					return this.serverName;
				}
				
			    public String adminPassword;

				public String getAdminPassword () {
					return this.adminPassword;
				}
				
			    public Integer trackMedalsRequirement;

				public Integer getTrackMedalsRequirement () {
					return this.trackMedalsRequirement;
				}
				
			    public Integer safetyRatingRequirement;

				public Integer getSafetyRatingRequirement () {
					return this.safetyRatingRequirement;
				}
				
			    public Integer racecraftRatingRequirement;

				public Integer getRacecraftRatingRequirement () {
					return this.racecraftRatingRequirement;
				}
				
			    public Integer isRaceLocked;

				public Integer getIsRaceLocked () {
					return this.isRaceLocked;
				}
				
			    public String password;

				public String getPassword () {
					return this.password;
				}
				
			    public Integer maxCarSlots;

				public Integer getMaxCarSlots () {
					return this.maxCarSlots;
				}
				
			    public String spectatorPassword;

				public String getSpectatorPassword () {
					return this.spectatorPassword;
				}
				
			    public Integer randomizeTrackWhenEmpty;

				public Integer getRandomizeTrackWhenEmpty () {
					return this.randomizeTrackWhenEmpty;
				}
				
			    public Integer shortFormationLap;

				public Integer getShortFormationLap () {
					return this.shortFormationLap;
				}
				
			    public Integer dumpLeaderboards;

				public Integer getDumpLeaderboards () {
					return this.dumpLeaderboards;
				}
				
			    public Integer dumpEntryList;

				public Integer getDumpEntryList () {
					return this.dumpEntryList;
				}
				
			    public Integer allowAutoDQ;

				public Integer getAllowAutoDQ () {
					return this.allowAutoDQ;
				}
				
			    public Integer formationLapType;

				public Integer getFormationLapType () {
					return this.formationLapType;
				}
				
			    public Integer configVersion;

				public Integer getConfigVersion () {
					return this.configVersion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.serverName = readString(dis);
					
					this.adminPassword = readString(dis);
					
						this.trackMedalsRequirement = readInteger(dis);
					
						this.safetyRatingRequirement = readInteger(dis);
					
						this.racecraftRatingRequirement = readInteger(dis);
					
						this.isRaceLocked = readInteger(dis);
					
					this.password = readString(dis);
					
						this.maxCarSlots = readInteger(dis);
					
					this.spectatorPassword = readString(dis);
					
						this.randomizeTrackWhenEmpty = readInteger(dis);
					
						this.shortFormationLap = readInteger(dis);
					
						this.dumpLeaderboards = readInteger(dis);
					
						this.dumpEntryList = readInteger(dis);
					
						this.allowAutoDQ = readInteger(dis);
					
						this.formationLapType = readInteger(dis);
					
						this.configVersion = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.serverName,dos);
					
					// String
				
						writeString(this.adminPassword,dos);
					
					// Integer
				
						writeInteger(this.trackMedalsRequirement,dos);
					
					// Integer
				
						writeInteger(this.safetyRatingRequirement,dos);
					
					// Integer
				
						writeInteger(this.racecraftRatingRequirement,dos);
					
					// Integer
				
						writeInteger(this.isRaceLocked,dos);
					
					// String
				
						writeString(this.password,dos);
					
					// Integer
				
						writeInteger(this.maxCarSlots,dos);
					
					// String
				
						writeString(this.spectatorPassword,dos);
					
					// Integer
				
						writeInteger(this.randomizeTrackWhenEmpty,dos);
					
					// Integer
				
						writeInteger(this.shortFormationLap,dos);
					
					// Integer
				
						writeInteger(this.dumpLeaderboards,dos);
					
					// Integer
				
						writeInteger(this.dumpEntryList,dos);
					
					// Integer
				
						writeInteger(this.allowAutoDQ,dos);
					
					// Integer
				
						writeInteger(this.formationLapType,dos);
					
					// Integer
				
						writeInteger(this.configVersion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("serverName="+serverName);
		sb.append(",adminPassword="+adminPassword);
		sb.append(",trackMedalsRequirement="+String.valueOf(trackMedalsRequirement));
		sb.append(",safetyRatingRequirement="+String.valueOf(safetyRatingRequirement));
		sb.append(",racecraftRatingRequirement="+String.valueOf(racecraftRatingRequirement));
		sb.append(",isRaceLocked="+String.valueOf(isRaceLocked));
		sb.append(",password="+password);
		sb.append(",maxCarSlots="+String.valueOf(maxCarSlots));
		sb.append(",spectatorPassword="+spectatorPassword);
		sb.append(",randomizeTrackWhenEmpty="+String.valueOf(randomizeTrackWhenEmpty));
		sb.append(",shortFormationLap="+String.valueOf(shortFormationLap));
		sb.append(",dumpLeaderboards="+String.valueOf(dumpLeaderboards));
		sb.append(",dumpEntryList="+String.valueOf(dumpEntryList));
		sb.append(",allowAutoDQ="+String.valueOf(allowAutoDQ));
		sb.append(",formationLapType="+String.valueOf(formationLapType));
		sb.append(",configVersion="+String.valueOf(configVersion));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(settingsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String serverName;

				public String getServerName () {
					return this.serverName;
				}
				
			    public String adminPassword;

				public String getAdminPassword () {
					return this.adminPassword;
				}
				
			    public Integer trackMedalsRequirement;

				public Integer getTrackMedalsRequirement () {
					return this.trackMedalsRequirement;
				}
				
			    public Integer safetyRatingRequirement;

				public Integer getSafetyRatingRequirement () {
					return this.safetyRatingRequirement;
				}
				
			    public Integer racecraftRatingRequirement;

				public Integer getRacecraftRatingRequirement () {
					return this.racecraftRatingRequirement;
				}
				
			    public Integer isRaceLocked;

				public Integer getIsRaceLocked () {
					return this.isRaceLocked;
				}
				
			    public String password;

				public String getPassword () {
					return this.password;
				}
				
			    public Integer maxCarSlots;

				public Integer getMaxCarSlots () {
					return this.maxCarSlots;
				}
				
			    public String spectatorPassword;

				public String getSpectatorPassword () {
					return this.spectatorPassword;
				}
				
			    public Integer randomizeTrackWhenEmpty;

				public Integer getRandomizeTrackWhenEmpty () {
					return this.randomizeTrackWhenEmpty;
				}
				
			    public Integer shortFormationLap;

				public Integer getShortFormationLap () {
					return this.shortFormationLap;
				}
				
			    public Integer dumpLeaderboards;

				public Integer getDumpLeaderboards () {
					return this.dumpLeaderboards;
				}
				
			    public Integer dumpEntryList;

				public Integer getDumpEntryList () {
					return this.dumpEntryList;
				}
				
			    public Integer allowAutoDQ;

				public Integer getAllowAutoDQ () {
					return this.allowAutoDQ;
				}
				
			    public Integer formationLapType;

				public Integer getFormationLapType () {
					return this.formationLapType;
				}
				
			    public Integer configVersion;

				public Integer getConfigVersion () {
					return this.configVersion;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.serverName = readString(dis);
					
					this.adminPassword = readString(dis);
					
						this.trackMedalsRequirement = readInteger(dis);
					
						this.safetyRatingRequirement = readInteger(dis);
					
						this.racecraftRatingRequirement = readInteger(dis);
					
						this.isRaceLocked = readInteger(dis);
					
					this.password = readString(dis);
					
						this.maxCarSlots = readInteger(dis);
					
					this.spectatorPassword = readString(dis);
					
						this.randomizeTrackWhenEmpty = readInteger(dis);
					
						this.shortFormationLap = readInteger(dis);
					
						this.dumpLeaderboards = readInteger(dis);
					
						this.dumpEntryList = readInteger(dis);
					
						this.allowAutoDQ = readInteger(dis);
					
						this.formationLapType = readInteger(dis);
					
						this.configVersion = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.serverName,dos);
					
					// String
				
						writeString(this.adminPassword,dos);
					
					// Integer
				
						writeInteger(this.trackMedalsRequirement,dos);
					
					// Integer
				
						writeInteger(this.safetyRatingRequirement,dos);
					
					// Integer
				
						writeInteger(this.racecraftRatingRequirement,dos);
					
					// Integer
				
						writeInteger(this.isRaceLocked,dos);
					
					// String
				
						writeString(this.password,dos);
					
					// Integer
				
						writeInteger(this.maxCarSlots,dos);
					
					// String
				
						writeString(this.spectatorPassword,dos);
					
					// Integer
				
						writeInteger(this.randomizeTrackWhenEmpty,dos);
					
					// Integer
				
						writeInteger(this.shortFormationLap,dos);
					
					// Integer
				
						writeInteger(this.dumpLeaderboards,dos);
					
					// Integer
				
						writeInteger(this.dumpEntryList,dos);
					
					// Integer
				
						writeInteger(this.allowAutoDQ,dos);
					
					// Integer
				
						writeInteger(this.formationLapType,dos);
					
					// Integer
				
						writeInteger(this.configVersion,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("serverName="+serverName);
		sb.append(",adminPassword="+adminPassword);
		sb.append(",trackMedalsRequirement="+String.valueOf(trackMedalsRequirement));
		sb.append(",safetyRatingRequirement="+String.valueOf(safetyRatingRequirement));
		sb.append(",racecraftRatingRequirement="+String.valueOf(racecraftRatingRequirement));
		sb.append(",isRaceLocked="+String.valueOf(isRaceLocked));
		sb.append(",password="+password);
		sb.append(",maxCarSlots="+String.valueOf(maxCarSlots));
		sb.append(",spectatorPassword="+spectatorPassword);
		sb.append(",randomizeTrackWhenEmpty="+String.valueOf(randomizeTrackWhenEmpty));
		sb.append(",shortFormationLap="+String.valueOf(shortFormationLap));
		sb.append(",dumpLeaderboards="+String.valueOf(dumpLeaderboards));
		sb.append(",dumpEntryList="+String.valueOf(dumpEntryList));
		sb.append(",allowAutoDQ="+String.valueOf(allowAutoDQ));
		sb.append(",formationLapType="+String.valueOf(formationLapType));
		sb.append(",configVersion="+String.valueOf(configVersion));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_2 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_2> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[0];

	
			    public String data;

				public String getData () {
					return this.data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_EntryExcelToJson.length == 0) {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_EntryExcelToJson = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_EntryExcelToJson, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_EntryExcelToJson) {

        	try {

        		int length = 0;
		
					this.data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data="+data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row8Struct row8 = new row8Struct();
row9Struct row9 = new row9Struct();
settingsStruct settings = new settingsStruct();




	
	/**
	 * [tDenormalize_2_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_2_DenormalizeOut", false);
		start_Hash.put("tDenormalize_2_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tDenormalize_2_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_2_DenormalizeOut {
StringBuilder data = new StringBuilder();
}
DenormalizeStructtDenormalize_2_DenormalizeOut denormalize_result_tDenormalize_2_DenormalizeOut = null;

 



/**
 * [tDenormalize_2_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tFileInputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_4", false);
		start_Hash.put("tFileInputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_4";

	
		int tos_count_tFileInputExcel_4 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:PAsk4Z2gJItTcQP2jZj10Yj4e6zF8VTkqC7+Jw==");
        String password_tFileInputExcel_4 = decryptedPassword_tFileInputExcel_4;
        if (password_tFileInputExcel_4.isEmpty()){
            password_tFileInputExcel_4 = null;
        }
			class RegexUtil_tFileInputExcel_4 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_4 regexUtil_tFileInputExcel_4 = new RegexUtil_tFileInputExcel_4();

		Object source_tFileInputExcel_4 = context.filepath + context.filename;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_4 = null;

		if(source_tFileInputExcel_4 instanceof String){
			workbook_tFileInputExcel_4 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_4), password_tFileInputExcel_4);
		} else if(source_tFileInputExcel_4 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_4 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_4, password_tFileInputExcel_4);
		} else{
			workbook_tFileInputExcel_4 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_4 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_4.addAll(regexUtil_tFileInputExcel_4.getSheets(workbook_tFileInputExcel_4, context.json_setting, false));
    	if(sheetList_tFileInputExcel_4.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_4 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_4 : sheetList_tFileInputExcel_4) {
			if(sheet_FilterNull_tFileInputExcel_4!=null && sheetList_FilterNull_tFileInputExcel_4.iterator()!=null && sheet_FilterNull_tFileInputExcel_4.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_4.add(sheet_FilterNull_tFileInputExcel_4);
			}
		}
		sheetList_tFileInputExcel_4 = sheetList_FilterNull_tFileInputExcel_4;
	if(sheetList_tFileInputExcel_4.size()>0){
		int nb_line_tFileInputExcel_4 = 0;

        int begin_line_tFileInputExcel_4 = 0;

        int footer_input_tFileInputExcel_4 = 0;

        int end_line_tFileInputExcel_4=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_4:sheetList_tFileInputExcel_4){
			end_line_tFileInputExcel_4+=(sheet_tFileInputExcel_4.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_4 -= footer_input_tFileInputExcel_4;
        int limit_tFileInputExcel_4 = 16;
        int start_column_tFileInputExcel_4 = 2-1;
        int end_column_tFileInputExcel_4 = -1;
        Integer lastColumn_tFileInputExcel_4 = 2;
        if(lastColumn_tFileInputExcel_4!=null){
        	end_column_tFileInputExcel_4 = lastColumn_tFileInputExcel_4.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_4 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(0);
        int rowCount_tFileInputExcel_4 = 0;
        int sheetIndex_tFileInputExcel_4 = 0;
        int currentRows_tFileInputExcel_4 = (sheetList_tFileInputExcel_4.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_4 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_4 = df_tFileInputExcel_4.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_4 = begin_line_tFileInputExcel_4; i_tFileInputExcel_4 < end_line_tFileInputExcel_4; i_tFileInputExcel_4++){

        	int emptyColumnCount_tFileInputExcel_4 = 0;

        	if (limit_tFileInputExcel_4 != -1 && nb_line_tFileInputExcel_4 >= limit_tFileInputExcel_4) {
        		break;
        	}

            while (i_tFileInputExcel_4 >= rowCount_tFileInputExcel_4 + currentRows_tFileInputExcel_4) {
                rowCount_tFileInputExcel_4 += currentRows_tFileInputExcel_4;
                sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(++sheetIndex_tFileInputExcel_4);
                currentRows_tFileInputExcel_4 = (sheet_tFileInputExcel_4.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_4_CURRENT_SHEET",sheet_tFileInputExcel_4.getSheetName());
            if (rowCount_tFileInputExcel_4 <= i_tFileInputExcel_4) {
                row_tFileInputExcel_4 = sheet_tFileInputExcel_4.getRow(i_tFileInputExcel_4 - rowCount_tFileInputExcel_4);
            }
		    row7 = null;
					int tempRowLength_tFileInputExcel_4 = 1;
				
				int columnIndex_tFileInputExcel_4 = 0;
			
			String[] temp_row_tFileInputExcel_4 = new String[tempRowLength_tFileInputExcel_4];
			int excel_end_column_tFileInputExcel_4;
			if(row_tFileInputExcel_4==null){
				excel_end_column_tFileInputExcel_4=0;
			}else{
				excel_end_column_tFileInputExcel_4=row_tFileInputExcel_4.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_4;
			if(end_column_tFileInputExcel_4 == -1){
				actual_end_column_tFileInputExcel_4 = excel_end_column_tFileInputExcel_4;
			}
			else{
				actual_end_column_tFileInputExcel_4 = end_column_tFileInputExcel_4 >	excel_end_column_tFileInputExcel_4 ? excel_end_column_tFileInputExcel_4 : end_column_tFileInputExcel_4;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_4 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_4;i++){
				if(i + start_column_tFileInputExcel_4 < actual_end_column_tFileInputExcel_4){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_4 = row_tFileInputExcel_4.getCell(i + start_column_tFileInputExcel_4);
					if(cell_tFileInputExcel_4!=null){
					switch (cell_tFileInputExcel_4.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_4)) {
									temp_row_tFileInputExcel_4[i] =cell_tFileInputExcel_4.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_4[i] = df_tFileInputExcel_4.format(cell_tFileInputExcel_4.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_4[i] =String.valueOf(cell_tFileInputExcel_4.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_4.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_4)) {
											temp_row_tFileInputExcel_4[i] =cell_tFileInputExcel_4.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_4 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_4.getNumericCellValue());
										temp_row_tFileInputExcel_4[i] = ne_tFileInputExcel_4.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_4[i] =String.valueOf(cell_tFileInputExcel_4.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_4[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_4[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_4[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_4[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_4 = false;
			row7 = new row7Struct();
			int curColNum_tFileInputExcel_4 = -1;
			String curColName_tFileInputExcel_4 = "";
			try{
							columnIndex_tFileInputExcel_4 = 0;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "data";

				row7.data = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else{
				row7.data = null;
				emptyColumnCount_tFileInputExcel_4++;
			}

				nb_line_tFileInputExcel_4++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_4 = true;
	            throw(e);
			}


		



 



/**
 * [tFileInputExcel_4 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 


	tos_count_tFileInputExcel_4++;

/**
 * [tFileInputExcel_4 main ] stop
 */
	
	/**
	 * [tFileInputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tDenormalize_2_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

if(denormalize_result_tDenormalize_2_DenormalizeOut == null){
	denormalize_result_tDenormalize_2_DenormalizeOut = new DenormalizeStructtDenormalize_2_DenormalizeOut();		
	denormalize_result_tDenormalize_2_DenormalizeOut.data.append(row7.data);
			
}else{		
	denormalize_result_tDenormalize_2_DenormalizeOut.data.append(";").append(row7.data);
			
}

 


	tos_count_tDenormalize_2_DenormalizeOut++;

/**
 * [tDenormalize_2_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_2_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";

	

 



/**
 * [tDenormalize_2_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_2_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";

	

 



/**
 * [tDenormalize_2_DenormalizeOut process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_4_NB_LINE",nb_line_tFileInputExcel_4);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_4 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_4.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_4", true);
end_Hash.put("tFileInputExcel_4", System.currentTimeMillis());




/**
 * [tFileInputExcel_4 end ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";

	
java.util.List<OnRowsEndStructtDenormalize_2> result_list_tDenormalize_2_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
if (denormalize_result_tDenormalize_2_DenormalizeOut != null) {
//generate result begin
	OnRowsEndStructtDenormalize_2 denormalize_row_tDenormalize_2_DenormalizeOut = new OnRowsEndStructtDenormalize_2();
                
	denormalize_row_tDenormalize_2_DenormalizeOut.data = denormalize_result_tDenormalize_2_DenormalizeOut.data.toString();
	
	//in the deepest end
	
	result_list_tDenormalize_2_DenormalizeOut.add(denormalize_row_tDenormalize_2_DenormalizeOut);

}
//generate result end
globalMap.put("tDenormalize_2", result_list_tDenormalize_2_DenormalizeOut);
globalMap.put("tDenormalize_2_DenormalizeOut_NB_LINE", result_list_tDenormalize_2_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tDenormalize_2_DenormalizeOut", true);
end_Hash.put("tDenormalize_2_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_2_DenormalizeOut end ] stop
 */




	
	/**
	 * [tJSONDocOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOutput_7", false);
		start_Hash.put("tJSONDocOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"settings");
					}
				
		int tos_count_tJSONDocOutput_7 = 0;
		
	globalMap.remove("tJSONDocOutput_7_CURRENT_NODE");
	globalMap.remove("tJSONDocOutput_7_CURRENT_PATH");
	globalMap.put("tJSONDocOutput_7_NB_LINE", 0);
	java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_7 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
	globalMap.put("keyMap_tJSONDocOutput_7", keyMap_tJSONDocOutput_7);
	de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_7 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_4");
	if (tJSONDocOutput_7 != null && globalMap.get("tJSONDocOpen_4_CURRENT_NODE") != null && globalMap.get("entryNode_tJSONDocOutput_7") == null && false == false) {
		try {
			globalMap.put("tJSONDocOutput_7", tJSONDocOutput_7);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_7_ERROR_MESSAGE", e.getMessage());
			throw e;
		} 
	}
 



/**
 * [tJSONDocOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
settingsStruct settings_tmp = new settingsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tExtractDelimitedFields_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractDelimitedFields_2", false);
		start_Hash.put("tExtractDelimitedFields_2", System.currentTimeMillis());
		
	
	currentComponent="tExtractDelimitedFields_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tExtractDelimitedFields_2 = 0;
		

int nb_line_tExtractDelimitedFields_2=0;
 



/**
 * [tExtractDelimitedFields_2 begin ] stop
 */



	
	/**
	 * [tDenormalize_2_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_2_ArrayIn", false);
		start_Hash.put("tDenormalize_2_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";

	
		int tos_count_tDenormalize_2_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_2_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_2> list_tDenormalize_2_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_2>)globalMap.get("tDenormalize_2");
        if(list_tDenormalize_2_ArrayIn == null) {
            list_tDenormalize_2_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
        }        
        for(OnRowsEndStructtDenormalize_2 row_tDenormalize_2_ArrayIn : list_tDenormalize_2_ArrayIn){
        					
    						row8.data = row_tDenormalize_2_ArrayIn.data;
    						

 



/**
 * [tDenormalize_2_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";

	

 


	tos_count_tDenormalize_2_ArrayIn++;

/**
 * [tDenormalize_2_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";

	

 



/**
 * [tDenormalize_2_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tExtractDelimitedFields_2 main ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

row9 = null;

row9 = new row9Struct();
	String field_tExtractDelimitedFields_2 = row8.data;
	String[] newFields_tExtractDelimitedFields_2 = new String[0];
	if(field_tExtractDelimitedFields_2!=null){// C_01
		try{
			newFields_tExtractDelimitedFields_2 = field_tExtractDelimitedFields_2.split(";",-1);
		int length_tExtractDelimitedFields_2 = newFields_tExtractDelimitedFields_2.length;
	String temp_tExtractDelimitedFields_2 = null;
	row9.serverName = 0>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[0];
	row9.adminPassword = 1>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[1];
	temp_tExtractDelimitedFields_2 = 2>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[2];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.trackMedalsRequirement = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.trackMedalsRequirement = null;
	}
	temp_tExtractDelimitedFields_2 = 3>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[3];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.safetyRatingRequirement = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.safetyRatingRequirement = null;
	}
	temp_tExtractDelimitedFields_2 = 4>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[4];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.racecraftRatingRequirement = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.racecraftRatingRequirement = null;
	}
	temp_tExtractDelimitedFields_2 = 5>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[5];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.isRaceLocked = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.isRaceLocked = null;
	}
	row9.password = 6>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[6];
	temp_tExtractDelimitedFields_2 = 7>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[7];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.maxCarSlots = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.maxCarSlots = null;
	}
	row9.spectatorPassword = 8>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[8];
	temp_tExtractDelimitedFields_2 = 9>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[9];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.randomizeTrackWhenEmpty = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.randomizeTrackWhenEmpty = null;
	}
	temp_tExtractDelimitedFields_2 = 10>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[10];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.shortFormationLap = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.shortFormationLap = null;
	}
	temp_tExtractDelimitedFields_2 = 11>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[11];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.dumpLeaderboards = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.dumpLeaderboards = null;
	}
	temp_tExtractDelimitedFields_2 = 12>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[12];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.dumpEntryList = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.dumpEntryList = null;
	}
	temp_tExtractDelimitedFields_2 = 13>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[13];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.allowAutoDQ = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.allowAutoDQ = null;
	}
	temp_tExtractDelimitedFields_2 = 14>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[14];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.formationLapType = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.formationLapType = null;
	}
	temp_tExtractDelimitedFields_2 = 15>=length_tExtractDelimitedFields_2?"":newFields_tExtractDelimitedFields_2[15];
	if(temp_tExtractDelimitedFields_2.length() > 0) {
		row9.configVersion = ParserUtils.parseTo_Integer(temp_tExtractDelimitedFields_2);
	} else {						
		row9.configVersion = null;
	}
	nb_line_tExtractDelimitedFields_2++;
}catch(java.lang.Exception ex_tExtractDelimitedFields_2){
    System.err.println(ex_tExtractDelimitedFields_2.getMessage());
    row9 = null;
}



 


	tos_count_tExtractDelimitedFields_2++;

/**
 * [tExtractDelimitedFields_2 main ] stop
 */
	
	/**
	 * [tExtractDelimitedFields_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_2";

	

 



/**
 * [tExtractDelimitedFields_2 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

settings = null;


// # Output table : 'settings'
settings_tmp.serverName = row9.serverName;
settings_tmp.adminPassword = row9.adminPassword;
settings_tmp.trackMedalsRequirement = row9.trackMedalsRequirement;
settings_tmp.safetyRatingRequirement = row9.safetyRatingRequirement;
settings_tmp.racecraftRatingRequirement = row9.racecraftRatingRequirement;
settings_tmp.isRaceLocked = row9.isRaceLocked;
settings_tmp.password = row9.password;
settings_tmp.maxCarSlots = row9.maxCarSlots;
settings_tmp.spectatorPassword = row9.spectatorPassword;
settings_tmp.randomizeTrackWhenEmpty = row9.randomizeTrackWhenEmpty;
settings_tmp.shortFormationLap = row9.shortFormationLap;
settings_tmp.dumpLeaderboards = row9.dumpLeaderboards;
settings_tmp.dumpEntryList = row9.dumpEntryList;
settings_tmp.allowAutoDQ = row9.allowAutoDQ;
settings_tmp.formationLapType = row9.formationLapType;
settings_tmp.configVersion = row9.configVersion;
settings = settings_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "settings"
if(settings != null) { 



	
	/**
	 * [tJSONDocOutput_7 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"settings");
					}
					
   // the entryNode is the node which receives our current values (new object(s), or array(s))
	com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_7 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_4_CURRENT_NODE");
	if (entryNode_tJSONDocOutput_7 != null) {
		String jsonPath = "$";
		// build path to enhance the error messages
		String path = null;
		if (jsonPath != null && jsonPath.isEmpty() == false) {
			if (jsonPath.startsWith("$")) {
				path = jsonPath;
			} else if (".".equals(jsonPath)) {
				path = (String) globalMap.get("tJSONDocOpen_4_CURRENT_PATH");
			} else {
				path = (String) globalMap.get("tJSONDocOpen_4_CURRENT_PATH") + "." + jsonPath;
			}
		} else {
			path = (String) globalMap.get("tJSONDocOpen_4_CURRENT_PATH");
		}
		/* we have to initialize the current node (which we want to create):
		 * if there is no parent node
		 * if there is a different entry node then in previous flow record
		 * if there is a different path then in previous flow record
		 */
		if (globalMap.get("entryNode_tJSONDocOutput_7") == null 
			|| (path.equals(globalMap.get("tJSONDocOutput_7_CURRENT_PATH")) == false)
			|| (globalMap.get("entryNode_tJSONDocOutput_7") != entryNode_tJSONDocOutput_7)) {
			try {
				tJSONDocOutput_7 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_4");
				globalMap.put("tJSONDocOutput_7", tJSONDocOutput_7);
				// get the parent object we have to dock on
				globalMap.put("entryNode_tJSONDocOutput_7", entryNode_tJSONDocOutput_7);
	   		globalMap.put("tJSONDocOutput_7_CURRENT_PATH", path);
	   		tJSONDocOutput_7.setCurrentPath(path);
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_7.getNode(entryNode_tJSONDocOutput_7, jsonPath, true);
			com.fasterxml.jackson.databind.node.ObjectNode parentNode_tJSONDocOutput_7 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				parentNode_tJSONDocOutput_7 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
			} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is already an ArrayNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
			globalMap.put("parent_node_tJSONDocOutput_7", parentNode_tJSONDocOutput_7);
			globalMap.put("tJSONDocOutput_7_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_7_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
   }	
	try { // start block for tJSONDocOutput_7
		// get the parent node
		com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("parent_node_tJSONDocOutput_7");
		com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_7 = null;
		if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
			currentNode_tJSONDocOutput_7 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
		} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
			throw new Exception(globalMap.get("tJSONDocOutput_7_CURRENT_PATH") + ": Actually as parent an ObjectNode is expected, but there is already an ArrayNode: " + node + ". Check the configuration.");
		} else {
			throw new Exception(globalMap.get("tJSONDocOutput_7_CURRENT_PATH") + ": Actually as parent an ObjectNode is expected, but there is anything else (or null): " + node + ". Check the configuration.");
		}
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "serverName";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.serverName, false);
		}
		globalMap.put("tJSONDocOutput_7.serverName", settings.serverName);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "adminPassword";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.adminPassword, false);
		}
		globalMap.put("tJSONDocOutput_7.adminPassword", settings.adminPassword);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "trackMedalsRequirement";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.trackMedalsRequirement, false);
		}
		globalMap.put("tJSONDocOutput_7.trackMedalsRequirement", settings.trackMedalsRequirement);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "safetyRatingRequirement";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.safetyRatingRequirement, false);
		}
		globalMap.put("tJSONDocOutput_7.safetyRatingRequirement", settings.safetyRatingRequirement);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "racecraftRatingRequirement";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.racecraftRatingRequirement, false);
		}
		globalMap.put("tJSONDocOutput_7.racecraftRatingRequirement", settings.racecraftRatingRequirement);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "isRaceLocked";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.isRaceLocked, false);
		}
		globalMap.put("tJSONDocOutput_7.isRaceLocked", settings.isRaceLocked);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "password";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.password, false);
		}
		globalMap.put("tJSONDocOutput_7.password", settings.password);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "maxCarSlots";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.maxCarSlots, false);
		}
		globalMap.put("tJSONDocOutput_7.maxCarSlots", settings.maxCarSlots);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "spectatorPassword";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.spectatorPassword, false);
		}
		globalMap.put("tJSONDocOutput_7.spectatorPassword", settings.spectatorPassword);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "randomizeTrackWhenEmpty";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.randomizeTrackWhenEmpty, false);
		}
		globalMap.put("tJSONDocOutput_7.randomizeTrackWhenEmpty", settings.randomizeTrackWhenEmpty);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "shortFormationLap";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.shortFormationLap, false);
		}
		globalMap.put("tJSONDocOutput_7.shortFormationLap", settings.shortFormationLap);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "dumpLeaderboards";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.dumpLeaderboards, false);
		}
		globalMap.put("tJSONDocOutput_7.dumpLeaderboards", settings.dumpLeaderboards);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "dumpEntryList";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.dumpEntryList, false);
		}
		globalMap.put("tJSONDocOutput_7.dumpEntryList", settings.dumpEntryList);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "allowAutoDQ";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.allowAutoDQ, false);
		}
		globalMap.put("tJSONDocOutput_7.allowAutoDQ", settings.allowAutoDQ);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "formationLapType";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.formationLapType, false);
		}
		globalMap.put("tJSONDocOutput_7.formationLapType", settings.formationLapType);
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "configVersion";
			}
			tJSONDocOutput_7.setValue(currentNode_tJSONDocOutput_7, fieldName, settings.configVersion, false);
		}
		globalMap.put("tJSONDocOutput_7.configVersion", settings.configVersion);
		globalMap.put("tJSONDocOutput_7_CURRENT_NODE", currentNode_tJSONDocOutput_7);
		Integer counter_tJSONDocOutput_7 = (Integer) globalMap.get("tJSONDocOutput_7_NB_LINE");
		globalMap.put("tJSONDocOutput_7_NB_LINE", counter_tJSONDocOutput_7.intValue() + 1);
	} catch (Exception e) {
		globalMap.put("tJSONDocOutput_7_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	} else {
		throw new Exception("The referenced current document from component: tJSONDocOpen_4 is null. Please check the job structur!");
	} 
 


	tos_count_tJSONDocOutput_7++;

/**
 * [tJSONDocOutput_7 main ] stop
 */
	
	/**
	 * [tJSONDocOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_7";

	

 



/**
 * [tJSONDocOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_7";

	

 



/**
 * [tJSONDocOutput_7 process_data_end ] stop
 */

} // End of branch "settings"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row9"



	
		} // C_01
	
	
	/**
	 * [tExtractDelimitedFields_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_2";

	

 



/**
 * [tExtractDelimitedFields_2 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_2_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";

	

 



/**
 * [tDenormalize_2_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";

	
	nb_line_tDenormalize_2_ArrayIn++;
}
globalMap.put("tDenormalize_2_ArrayIn_NB_LINE",nb_line_tDenormalize_2_ArrayIn);
 

ok_Hash.put("tDenormalize_2_ArrayIn", true);
end_Hash.put("tDenormalize_2_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_2_ArrayIn end ] stop
 */

	
	/**
	 * [tExtractDelimitedFields_2 end ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_2";

	

globalMap.put("tExtractDelimitedFields_2_NB_LINE",nb_line_tExtractDelimitedFields_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tExtractDelimitedFields_2", true);
end_Hash.put("tExtractDelimitedFields_2", System.currentTimeMillis());




/**
 * [tExtractDelimitedFields_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tJSONDocOutput_7 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_7";

	
	globalMap.remove("entryNode_tJSONDocOutput_7");
    globalMap.put("tJSONDocOutput_7_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util.buildSQLInClause(keyMap_tJSONDocOutput_7.keySet(), "='0'"));
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"settings");
			  	}
			  	
 

ok_Hash.put("tJSONDocOutput_7", true);
end_Hash.put("tJSONDocOutput_7", System.currentTimeMillis());




/**
 * [tJSONDocOutput_7 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tJSONDocSave_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tDenormalize_2_ArrayIn"
							globalMap.remove("tDenormalize_2");
						
				try{
					
	
	/**
	 * [tFileInputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 finally ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";

	

 



/**
 * [tDenormalize_2_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_2_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";

	

 



/**
 * [tDenormalize_2_ArrayIn finally ] stop
 */

	
	/**
	 * [tExtractDelimitedFields_2 finally ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_2";

	

 



/**
 * [tExtractDelimitedFields_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tJSONDocOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_7";

	

 



/**
 * [tJSONDocOutput_7 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 1);
	}
	

public void tJSONDocSave_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJSONDocSave_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJSONDocSave_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocSave_4", false);
		start_Hash.put("tJSONDocSave_4", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocSave_4";

	
		int tos_count_tJSONDocSave_4 = 0;
		
	de.jlo.talendcomp.json.JsonDocument tJSONDocSave_4 = new de.jlo.talendcomp.json.JsonDocument((com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOutput_7_CURRENT_NODE"));
	globalMap.put("tJSONDocSave_4", tJSONDocSave_4);	
	com.fasterxml.jackson.databind.JsonNode tJSONDocSave_4_outputNode = null;
	try {
		tJSONDocSave_4_outputNode = tJSONDocSave_4.getConditionalUnwrappedRootNode((false), true);
		globalMap.put("tJSONDocSave_4_CURRENT_NODE", tJSONDocSave_4_outputNode);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_4_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	String filePath_tJSONDocSave_4 = context.filepath + context.json_setting + ".json";
	try {
		tJSONDocSave_4.writeToFile(filePath_tJSONDocSave_4, true, false);
		globalMap.put("tJSONDocSave_4_OUTPUT_FILE_PATH", filePath_tJSONDocSave_4);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_4_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	Object jsonOutput_tJSONDocSave_4 = null;
	try {
		jsonOutput_tJSONDocSave_4 = tJSONDocSave_4.getJsonString(tJSONDocSave_4_outputNode, true, false);
	} catch (Exception e) {
		globalMap.put("tJSONDocSave_4_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	globalMap.put("tJSONDocSave_4_JSON_STRING", (String) jsonOutput_tJSONDocSave_4);
	
 



/**
 * [tJSONDocSave_4 begin ] stop
 */
	
	/**
	 * [tJSONDocSave_4 main ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_4";

	

 


	tos_count_tJSONDocSave_4++;

/**
 * [tJSONDocSave_4 main ] stop
 */
	
	/**
	 * [tJSONDocSave_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_4";

	

 



/**
 * [tJSONDocSave_4 process_data_begin ] stop
 */
	
	/**
	 * [tJSONDocSave_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_4";

	

 



/**
 * [tJSONDocSave_4 process_data_end ] stop
 */
	
	/**
	 * [tJSONDocSave_4 end ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_4";

	

		 
	
 

ok_Hash.put("tJSONDocSave_4", true);
end_Hash.put("tJSONDocSave_4", System.currentTimeMillis());




/**
 * [tJSONDocSave_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJSONDocSave_4 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocSave_4";

	

 



/**
 * [tJSONDocSave_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJSONDocSave_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final EntryExcelToJson EntryExcelToJsonClass = new EntryExcelToJson();

        int exitCode = EntryExcelToJsonClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = EntryExcelToJson.class.getClassLoader().getResourceAsStream("local_project/entryexceltojson_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = EntryExcelToJson.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("filepath", "id_String");
                            context.filepath=(String) context.getProperty("filepath");
                        context.setContextType("filename", "id_String");
                            context.filename=(String) context.getProperty("filename");
                        context.setContextType("json_entry", "id_String");
                            context.json_entry=(String) context.getProperty("json_entry");
                        context.setContextType("json_event", "id_String");
                            context.json_event=(String) context.getProperty("json_event");
                        context.setContextType("json_eventRules", "id_String");
                            context.json_eventRules=(String) context.getProperty("json_eventRules");
                        context.setContextType("json_setting", "id_String");
                            context.json_setting=(String) context.getProperty("json_setting");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("filepath")) {
                context.filepath = (String) parentContextMap.get("filepath");
            }if (parentContextMap.containsKey("filename")) {
                context.filename = (String) parentContextMap.get("filename");
            }if (parentContextMap.containsKey("json_entry")) {
                context.json_entry = (String) parentContextMap.get("json_entry");
            }if (parentContextMap.containsKey("json_event")) {
                context.json_event = (String) parentContextMap.get("json_event");
            }if (parentContextMap.containsKey("json_eventRules")) {
                context.json_eventRules = (String) parentContextMap.get("json_eventRules");
            }if (parentContextMap.containsKey("json_setting")) {
                context.json_setting = (String) parentContextMap.get("json_setting");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJSONDocOpen_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJSONDocOpen_1) {
globalMap.put("tJSONDocOpen_1_SUBPROCESS_STATE", -1);

e_tJSONDocOpen_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : EntryExcelToJson");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     360142 characters generated by Talend Open Studio for Big Data 
 *     on the April 18, 2020 4:14:41 PM SGT
 ************************************************************************************************/